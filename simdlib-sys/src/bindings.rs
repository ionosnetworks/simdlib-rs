/* automatically generated by rust-bindgen 0.59.1 */

pub const _STDINT_H: u32 = 1;
pub const _FEATURES_H: u32 = 1;
pub const _DEFAULT_SOURCE: u32 = 1;
pub const __GLIBC_USE_ISOC2X: u32 = 0;
pub const __USE_ISOC11: u32 = 1;
pub const __USE_ISOC99: u32 = 1;
pub const __USE_ISOC95: u32 = 1;
pub const __USE_POSIX_IMPLICITLY: u32 = 1;
pub const _POSIX_SOURCE: u32 = 1;
pub const _POSIX_C_SOURCE: u32 = 200809;
pub const __USE_POSIX: u32 = 1;
pub const __USE_POSIX2: u32 = 1;
pub const __USE_POSIX199309: u32 = 1;
pub const __USE_POSIX199506: u32 = 1;
pub const __USE_XOPEN2K: u32 = 1;
pub const __USE_XOPEN2K8: u32 = 1;
pub const _ATFILE_SOURCE: u32 = 1;
pub const __USE_MISC: u32 = 1;
pub const __USE_ATFILE: u32 = 1;
pub const __USE_FORTIFY_LEVEL: u32 = 0;
pub const __GLIBC_USE_DEPRECATED_GETS: u32 = 0;
pub const __GLIBC_USE_DEPRECATED_SCANF: u32 = 0;
pub const _STDC_PREDEF_H: u32 = 1;
pub const __STDC_IEC_559__: u32 = 1;
pub const __STDC_IEC_559_COMPLEX__: u32 = 1;
pub const __STDC_ISO_10646__: u32 = 201706;
pub const __GNU_LIBRARY__: u32 = 6;
pub const __GLIBC__: u32 = 2;
pub const __GLIBC_MINOR__: u32 = 31;
pub const _SYS_CDEFS_H: u32 = 1;
pub const __glibc_c99_flexarr_available: u32 = 1;
pub const __WORDSIZE: u32 = 64;
pub const __WORDSIZE_TIME64_COMPAT32: u32 = 1;
pub const __SYSCALL_WORDSIZE: u32 = 64;
pub const __LONG_DOUBLE_USES_FLOAT128: u32 = 0;
pub const __HAVE_GENERIC_SELECTION: u32 = 1;
pub const __GLIBC_USE_LIB_EXT2: u32 = 0;
pub const __GLIBC_USE_IEC_60559_BFP_EXT: u32 = 0;
pub const __GLIBC_USE_IEC_60559_BFP_EXT_C2X: u32 = 0;
pub const __GLIBC_USE_IEC_60559_FUNCS_EXT: u32 = 0;
pub const __GLIBC_USE_IEC_60559_FUNCS_EXT_C2X: u32 = 0;
pub const __GLIBC_USE_IEC_60559_TYPES_EXT: u32 = 0;
pub const _BITS_TYPES_H: u32 = 1;
pub const __TIMESIZE: u32 = 64;
pub const _BITS_TYPESIZES_H: u32 = 1;
pub const __OFF_T_MATCHES_OFF64_T: u32 = 1;
pub const __INO_T_MATCHES_INO64_T: u32 = 1;
pub const __RLIM_T_MATCHES_RLIM64_T: u32 = 1;
pub const __STATFS_MATCHES_STATFS64: u32 = 1;
pub const __FD_SETSIZE: u32 = 1024;
pub const _BITS_TIME64_H: u32 = 1;
pub const _BITS_WCHAR_H: u32 = 1;
pub const _BITS_STDINT_INTN_H: u32 = 1;
pub const _BITS_STDINT_UINTN_H: u32 = 1;
pub const INT8_MIN: i32 = -128;
pub const INT16_MIN: i32 = -32768;
pub const INT32_MIN: i32 = -2147483648;
pub const INT8_MAX: u32 = 127;
pub const INT16_MAX: u32 = 32767;
pub const INT32_MAX: u32 = 2147483647;
pub const UINT8_MAX: u32 = 255;
pub const UINT16_MAX: u32 = 65535;
pub const UINT32_MAX: u32 = 4294967295;
pub const INT_LEAST8_MIN: i32 = -128;
pub const INT_LEAST16_MIN: i32 = -32768;
pub const INT_LEAST32_MIN: i32 = -2147483648;
pub const INT_LEAST8_MAX: u32 = 127;
pub const INT_LEAST16_MAX: u32 = 32767;
pub const INT_LEAST32_MAX: u32 = 2147483647;
pub const UINT_LEAST8_MAX: u32 = 255;
pub const UINT_LEAST16_MAX: u32 = 65535;
pub const UINT_LEAST32_MAX: u32 = 4294967295;
pub const INT_FAST8_MIN: i32 = -128;
pub const INT_FAST16_MIN: i64 = -9223372036854775808;
pub const INT_FAST32_MIN: i64 = -9223372036854775808;
pub const INT_FAST8_MAX: u32 = 127;
pub const INT_FAST16_MAX: u64 = 9223372036854775807;
pub const INT_FAST32_MAX: u64 = 9223372036854775807;
pub const UINT_FAST8_MAX: u32 = 255;
pub const UINT_FAST16_MAX: i32 = -1;
pub const UINT_FAST32_MAX: i32 = -1;
pub const INTPTR_MIN: i64 = -9223372036854775808;
pub const INTPTR_MAX: u64 = 9223372036854775807;
pub const UINTPTR_MAX: i32 = -1;
pub const PTRDIFF_MIN: i64 = -9223372036854775808;
pub const PTRDIFF_MAX: u64 = 9223372036854775807;
pub const SIG_ATOMIC_MIN: i32 = -2147483648;
pub const SIG_ATOMIC_MAX: u32 = 2147483647;
pub const SIZE_MAX: i32 = -1;
pub const WINT_MIN: u32 = 0;
pub const WINT_MAX: u32 = 4294967295;
pub type size_t = ::std::os::raw::c_ulong;
pub type wchar_t = ::std::os::raw::c_int;
#[repr(C)]
#[repr(align(16))]
#[derive(Debug, Copy, Clone)]
pub struct max_align_t {
    pub __clang_max_align_nonce1: ::std::os::raw::c_longlong,
    pub __bindgen_padding_0: u64,
    pub __clang_max_align_nonce2: u128,
}
pub type __u_char = ::std::os::raw::c_uchar;
pub type __u_short = ::std::os::raw::c_ushort;
pub type __u_int = ::std::os::raw::c_uint;
pub type __u_long = ::std::os::raw::c_ulong;
pub type __int8_t = ::std::os::raw::c_schar;
pub type __uint8_t = ::std::os::raw::c_uchar;
pub type __int16_t = ::std::os::raw::c_short;
pub type __uint16_t = ::std::os::raw::c_ushort;
pub type __int32_t = ::std::os::raw::c_int;
pub type __uint32_t = ::std::os::raw::c_uint;
pub type __int64_t = ::std::os::raw::c_long;
pub type __uint64_t = ::std::os::raw::c_ulong;
pub type __int_least8_t = __int8_t;
pub type __uint_least8_t = __uint8_t;
pub type __int_least16_t = __int16_t;
pub type __uint_least16_t = __uint16_t;
pub type __int_least32_t = __int32_t;
pub type __uint_least32_t = __uint32_t;
pub type __int_least64_t = __int64_t;
pub type __uint_least64_t = __uint64_t;
pub type __quad_t = ::std::os::raw::c_long;
pub type __u_quad_t = ::std::os::raw::c_ulong;
pub type __intmax_t = ::std::os::raw::c_long;
pub type __uintmax_t = ::std::os::raw::c_ulong;
pub type __dev_t = ::std::os::raw::c_ulong;
pub type __uid_t = ::std::os::raw::c_uint;
pub type __gid_t = ::std::os::raw::c_uint;
pub type __ino_t = ::std::os::raw::c_ulong;
pub type __ino64_t = ::std::os::raw::c_ulong;
pub type __mode_t = ::std::os::raw::c_uint;
pub type __nlink_t = ::std::os::raw::c_ulong;
pub type __off_t = ::std::os::raw::c_long;
pub type __off64_t = ::std::os::raw::c_long;
pub type __pid_t = ::std::os::raw::c_int;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __fsid_t {
    pub __val: [::std::os::raw::c_int; 2usize],
}
pub type __clock_t = ::std::os::raw::c_long;
pub type __rlim_t = ::std::os::raw::c_ulong;
pub type __rlim64_t = ::std::os::raw::c_ulong;
pub type __id_t = ::std::os::raw::c_uint;
pub type __time_t = ::std::os::raw::c_long;
pub type __useconds_t = ::std::os::raw::c_uint;
pub type __suseconds_t = ::std::os::raw::c_long;
pub type __daddr_t = ::std::os::raw::c_int;
pub type __key_t = ::std::os::raw::c_int;
pub type __clockid_t = ::std::os::raw::c_int;
pub type __timer_t = *mut ::std::os::raw::c_void;
pub type __blksize_t = ::std::os::raw::c_long;
pub type __blkcnt_t = ::std::os::raw::c_long;
pub type __blkcnt64_t = ::std::os::raw::c_long;
pub type __fsblkcnt_t = ::std::os::raw::c_ulong;
pub type __fsblkcnt64_t = ::std::os::raw::c_ulong;
pub type __fsfilcnt_t = ::std::os::raw::c_ulong;
pub type __fsfilcnt64_t = ::std::os::raw::c_ulong;
pub type __fsword_t = ::std::os::raw::c_long;
pub type __ssize_t = ::std::os::raw::c_long;
pub type __syscall_slong_t = ::std::os::raw::c_long;
pub type __syscall_ulong_t = ::std::os::raw::c_ulong;
pub type __loff_t = __off64_t;
pub type __caddr_t = *mut ::std::os::raw::c_char;
pub type __intptr_t = ::std::os::raw::c_long;
pub type __socklen_t = ::std::os::raw::c_uint;
pub type __sig_atomic_t = ::std::os::raw::c_int;
pub type int_least8_t = __int_least8_t;
pub type int_least16_t = __int_least16_t;
pub type int_least32_t = __int_least32_t;
pub type int_least64_t = __int_least64_t;
pub type uint_least8_t = __uint_least8_t;
pub type uint_least16_t = __uint_least16_t;
pub type uint_least32_t = __uint_least32_t;
pub type uint_least64_t = __uint_least64_t;
pub type int_fast8_t = ::std::os::raw::c_schar;
pub type int_fast16_t = ::std::os::raw::c_long;
pub type int_fast32_t = ::std::os::raw::c_long;
pub type int_fast64_t = ::std::os::raw::c_long;
pub type uint_fast8_t = ::std::os::raw::c_uchar;
pub type uint_fast16_t = ::std::os::raw::c_ulong;
pub type uint_fast32_t = ::std::os::raw::c_ulong;
pub type uint_fast64_t = ::std::os::raw::c_ulong;
pub type intmax_t = __intmax_t;
pub type uintmax_t = __uintmax_t;
#[repr(u32)]
#[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]
pub enum SimdBayerLayoutType {
    SimdBayerLayoutGrbg = 0,
    SimdBayerLayoutGbrg = 1,
    SimdBayerLayoutRggb = 2,
    SimdBayerLayoutBggr = 3,
}
#[repr(u32)]
#[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]
pub enum SimdBool {
    SimdFalse = 0,
    SimdTrue = 1,
}
#[repr(u32)]
#[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]
pub enum SimdCompareType {
    SimdCompareEqual = 0,
    SimdCompareNotEqual = 1,
    SimdCompareGreater = 2,
    SimdCompareGreaterOrEqual = 3,
    SimdCompareLesser = 4,
    SimdCompareLesserOrEqual = 5,
}
#[repr(u32)]
#[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]
pub enum SimdConvolutionActivationType {
    SimdConvolutionActivationIdentity = 0,
    SimdConvolutionActivationRelu = 1,
    SimdConvolutionActivationLeakyRelu = 2,
    SimdConvolutionActivationRestrictRange = 3,
    SimdConvolutionActivationPrelu = 4,
    SimdConvolutionActivationElu = 5,
    SimdConvolutionActivationHswish = 6,
    SimdConvolutionActivationMish = 7,
    SimdConvolutionActivationHardSigmoid = 8,
    SimdConvolutionActivationSwish = 9,
}
#[repr(u32)]
#[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]
pub enum SimdCpuInfoType {
    SimdCpuInfoSockets = 0,
    SimdCpuInfoCores = 1,
    SimdCpuInfoThreads = 2,
    SimdCpuInfoCacheL1 = 3,
    SimdCpuInfoCacheL2 = 4,
    SimdCpuInfoCacheL3 = 5,
    SimdCpuInfoSse2 = 6,
    SimdCpuInfoSse41 = 7,
    SimdCpuInfoAvx = 8,
    SimdCpuInfoAvx2 = 9,
    SimdCpuInfoAvx512f = 10,
    SimdCpuInfoAvx512bw = 11,
    SimdCpuInfoAvx512vnni = 12,
    SimdCpuInfoVmx = 13,
    SimdCpuInfoVsx = 14,
    SimdCpuInfoNeon = 15,
}
#[repr(u32)]
#[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]
pub enum SimdDetectionInfoFlags {
    SimdDetectionInfoFeatureHaar = 0,
    SimdDetectionInfoFeatureLbp = 1,
    SimdDetectionInfoFeatureMask = 3,
    SimdDetectionInfoHasTilted = 4,
    SimdDetectionInfoCanInt16 = 8,
}
#[repr(u32)]
#[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]
pub enum SimdImageFileType {
    SimdImageFileUndefined = 0,
    SimdImageFilePgmTxt = 1,
    SimdImageFilePgmBin = 2,
    SimdImageFilePpmTxt = 3,
    SimdImageFilePpmBin = 4,
    SimdImageFilePng = 5,
    SimdImageFileJpeg = 6,
}
#[repr(u32)]
#[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]
pub enum SimdOperationBinary8uType {
    SimdOperationBinary8uAverage = 0,
    SimdOperationBinary8uAnd = 1,
    SimdOperationBinary8uOr = 2,
    SimdOperationBinary8uMaximum = 3,
    SimdOperationBinary8uMinimum = 4,
    SimdOperationBinary8uSaturatedSubtraction = 5,
    SimdOperationBinary8uSaturatedAddition = 6,
}
#[repr(u32)]
#[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]
pub enum SimdOperationBinary16iType {
    SimdOperationBinary16iAddition = 0,
    SimdOperationBinary16iSubtraction = 1,
}
#[repr(u32)]
#[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]
pub enum SimdPixelFormatType {
    SimdPixelFormatNone = 0,
    SimdPixelFormatGray8 = 1,
    SimdPixelFormatUv16 = 2,
    SimdPixelFormatBgr24 = 3,
    SimdPixelFormatBgra32 = 4,
    SimdPixelFormatInt16 = 5,
    SimdPixelFormatInt32 = 6,
    SimdPixelFormatInt64 = 7,
    SimdPixelFormatFloat = 8,
    SimdPixelFormatDouble = 9,
    SimdPixelFormatBayerGrbg = 10,
    SimdPixelFormatBayerGbrg = 11,
    SimdPixelFormatBayerRggb = 12,
    SimdPixelFormatBayerBggr = 13,
    SimdPixelFormatHsv24 = 14,
    SimdPixelFormatHsl24 = 15,
    SimdPixelFormatRgb24 = 16,
    SimdPixelFormatRgba32 = 17,
    SimdPixelFormatUyvy16 = 18,
}
#[repr(u32)]
#[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]
pub enum SimdReduceType {
    SimdReduce2x2 = 0,
    SimdReduce3x3 = 1,
    SimdReduce4x4 = 2,
    SimdReduce5x5 = 3,
}
#[repr(u32)]
#[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]
pub enum SimdResizeChannelType {
    SimdResizeChannelByte = 0,
    SimdResizeChannelShort = 1,
    SimdResizeChannelFloat = 2,
}
#[repr(u32)]
#[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]
pub enum SimdResizeMethodType {
    SimdResizeMethodNearest = 0,
    SimdResizeMethodNearestPytorch = 1,
    SimdResizeMethodBilinear = 2,
    SimdResizeMethodBilinearCaffe = 3,
    SimdResizeMethodBilinearPytorch = 4,
    SimdResizeMethodBicubic = 5,
    SimdResizeMethodArea = 6,
    SimdResizeMethodAreaFast = 7,
}
impl SimdSynetCompatibilityType {
    pub const SimdSynetCompatibilityFmaUse: SimdSynetCompatibilityType =
        SimdSynetCompatibilityType::SimdSynetCompatibilityDefault;
}
impl SimdSynetCompatibilityType {
    pub const SimdSynetCompatibility8iPrecise: SimdSynetCompatibilityType =
        SimdSynetCompatibilityType::SimdSynetCompatibilityDefault;
}
impl SimdSynetCompatibilityType {
    pub const SimdSynetCompatibility16bfAvoid: SimdSynetCompatibilityType =
        SimdSynetCompatibilityType::SimdSynetCompatibilityDefault;
}
#[repr(u32)]
#[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]
pub enum SimdSynetCompatibilityType {
    SimdSynetCompatibilityDefault = 0,
    SimdSynetCompatibilityFmaNoTail = 1,
    SimdSynetCompatibilityFmaAvoid = 2,
    SimdSynetCompatibilityFmaMask = 3,
    SimdSynetCompatibility8iOverflow = 4,
    SimdSynetCompatibility8iNarrowed = 8,
    SimdSynetCompatibility8iMask = 12,
    SimdSynetCompatibility16bfHard = 16,
    SimdSynetCompatibility16bfSoft = 32,
    SimdSynetCompatibility16bfMask = 48,
}
#[repr(u32)]
#[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]
pub enum SimdSynetEltwiseOperationType {
    SimdSynetEltwiseOperationProduct = 0,
    SimdSynetEltwiseOperationSum = 1,
    SimdSynetEltwiseOperationMax = 2,
    SimdSynetEltwiseOperationMin = 3,
}
#[repr(u32)]
#[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]
pub enum SimdSynetUnaryOperation32fType {
    SimdSynetUnaryOperation32fAbs = 0,
    SimdSynetUnaryOperation32fExp = 1,
    SimdSynetUnaryOperation32fLog = 2,
    SimdSynetUnaryOperation32fNeg = 3,
    SimdSynetUnaryOperation32fRsqrt = 4,
    SimdSynetUnaryOperation32fSqrt = 5,
    SimdSynetUnaryOperation32fTanh = 6,
    SimdSynetUnaryOperation32fZero = 7,
}
#[repr(i32)]
#[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]
pub enum SimdTensorFormatType {
    SimdTensorFormatUnknown = -1,
    SimdTensorFormatNchw = 0,
    SimdTensorFormatNhwc = 1,
    SimdTensorFormatNchw4c = 2,
    SimdTensorFormatNchw8c = 3,
    SimdTensorFormatNchw16c = 4,
    SimdTensorFormatNchwXc = 5,
    SimdTensorFormatOiyx = 6,
    SimdTensorFormatYxio = 7,
    SimdTensorFormatOyxi4o = 8,
    SimdTensorFormatOyxi8o = 9,
    SimdTensorFormatOyxi16o = 10,
    SimdTensorFormatOyxiXo = 11,
}
#[repr(i32)]
#[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]
pub enum SimdTensorDataType {
    SimdTensorDataUnknown = -1,
    SimdTensorData32f = 0,
    SimdTensorData32i = 1,
    SimdTensorData8i = 2,
    SimdTensorData8u = 3,
}
#[repr(u32)]
#[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]
pub enum SimdTransformType {
    SimdTransformRotate0 = 0,
    SimdTransformRotate90 = 1,
    SimdTransformRotate180 = 2,
    SimdTransformRotate270 = 3,
    SimdTransformTransposeRotate0 = 4,
    SimdTransformTransposeRotate90 = 5,
    SimdTransformTransposeRotate180 = 6,
    SimdTransformTransposeRotate270 = 7,
}
#[repr(i32)]
#[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]
pub enum SimdYuvType {
    SimdYuvUnknown = -1,
    SimdYuvBt601 = 0,
    SimdYuvBt709 = 1,
    SimdYuvBt2020 = 2,
    SimdYuvTrect871 = 3,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct SimdConvolutionParameters {
    pub srcC: size_t,
    pub srcH: size_t,
    pub srcW: size_t,
    pub srcT: SimdTensorDataType,
    pub srcF: SimdTensorFormatType,
    pub dstC: size_t,
    pub dstH: size_t,
    pub dstW: size_t,
    pub dstT: SimdTensorDataType,
    pub dstF: SimdTensorFormatType,
    pub kernelY: size_t,
    pub kernelX: size_t,
    pub dilationY: size_t,
    pub dilationX: size_t,
    pub strideY: size_t,
    pub strideX: size_t,
    pub padY: size_t,
    pub padX: size_t,
    pub padH: size_t,
    pub padW: size_t,
    pub group: size_t,
    pub activation: SimdConvolutionActivationType,
}
extern "C" {
    pub fn SimdVersion() -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn SimdCpuInfo(type_: SimdCpuInfoType) -> size_t;
}
extern "C" {
    pub fn SimdPerformanceStatistic() -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn SimdAllocate(size: size_t, align: size_t) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn SimdFree(ptr: *mut ::std::os::raw::c_void);
}
extern "C" {
    pub fn SimdAlign(size: size_t, align: size_t) -> size_t;
}
extern "C" {
    pub fn SimdAlignment() -> size_t;
}
extern "C" {
    pub fn SimdRelease(context: *mut ::std::os::raw::c_void);
}
extern "C" {
    pub fn SimdGetThreadNumber() -> size_t;
}
extern "C" {
    pub fn SimdSetThreadNumber(threadNumber: size_t);
}
extern "C" {
    pub fn SimdGetFastMode() -> SimdBool;
}
extern "C" {
    pub fn SimdSetFastMode(value: SimdBool);
}
extern "C" {
    pub fn SimdCrc32(src: *const ::std::os::raw::c_void, size: size_t) -> u32;
}
extern "C" {
    pub fn SimdCrc32c(src: *const ::std::os::raw::c_void, size: size_t) -> u32;
}
extern "C" {
    pub fn SimdAbsDifference(
        a: *const u8,
        aStride: size_t,
        b: *const u8,
        bStride: size_t,
        c: *mut u8,
        cStride: size_t,
        width: size_t,
        height: size_t,
    );
}
extern "C" {
    pub fn SimdAbsDifferenceSum(
        a: *const u8,
        aStride: size_t,
        b: *const u8,
        bStride: size_t,
        width: size_t,
        height: size_t,
        sum: *mut u64,
    );
}
extern "C" {
    pub fn SimdAbsDifferenceSumMasked(
        a: *const u8,
        aStride: size_t,
        b: *const u8,
        bStride: size_t,
        mask: *const u8,
        maskStride: size_t,
        index: u8,
        width: size_t,
        height: size_t,
        sum: *mut u64,
    );
}
extern "C" {
    pub fn SimdAbsDifferenceSums3x3(
        current: *const u8,
        currentStride: size_t,
        background: *const u8,
        backgroundStride: size_t,
        width: size_t,
        height: size_t,
        sums: *mut u64,
    );
}
extern "C" {
    pub fn SimdAbsDifferenceSums3x3Masked(
        current: *const u8,
        currentStride: size_t,
        background: *const u8,
        backgroundStride: size_t,
        mask: *const u8,
        maskStride: size_t,
        index: u8,
        width: size_t,
        height: size_t,
        sums: *mut u64,
    );
}
extern "C" {
    pub fn SimdAbsGradientSaturatedSum(
        src: *const u8,
        srcStride: size_t,
        width: size_t,
        height: size_t,
        dst: *mut u8,
        dstStride: size_t,
    );
}
extern "C" {
    pub fn SimdAddFeatureDifference(
        value: *const u8,
        valueStride: size_t,
        width: size_t,
        height: size_t,
        lo: *const u8,
        loStride: size_t,
        hi: *const u8,
        hiStride: size_t,
        weight: u16,
        difference: *mut u8,
        differenceStride: size_t,
    );
}
extern "C" {
    pub fn SimdAlphaBlending(
        src: *const u8,
        srcStride: size_t,
        width: size_t,
        height: size_t,
        channelCount: size_t,
        alpha: *const u8,
        alphaStride: size_t,
        dst: *mut u8,
        dstStride: size_t,
    );
}
extern "C" {
    pub fn SimdAlphaBlendingUniform(
        src: *const u8,
        srcStride: size_t,
        width: size_t,
        height: size_t,
        channelCount: size_t,
        alpha: u8,
        dst: *mut u8,
        dstStride: size_t,
    );
}
extern "C" {
    pub fn SimdAlphaFilling(
        dst: *mut u8,
        dstStride: size_t,
        width: size_t,
        height: size_t,
        channel: *const u8,
        channelCount: size_t,
        alpha: *const u8,
        alphaStride: size_t,
    );
}
extern "C" {
    pub fn SimdAlphaPremultiply(
        src: *const u8,
        srcStride: size_t,
        width: size_t,
        height: size_t,
        dst: *mut u8,
        dstStride: size_t,
    );
}
extern "C" {
    pub fn SimdAlphaUnpremultiply(
        src: *const u8,
        srcStride: size_t,
        width: size_t,
        height: size_t,
        dst: *mut u8,
        dstStride: size_t,
    );
}
extern "C" {
    pub fn SimdBackgroundGrowRangeSlow(
        value: *const u8,
        valueStride: size_t,
        width: size_t,
        height: size_t,
        lo: *mut u8,
        loStride: size_t,
        hi: *mut u8,
        hiStride: size_t,
    );
}
extern "C" {
    pub fn SimdBackgroundGrowRangeFast(
        value: *const u8,
        valueStride: size_t,
        width: size_t,
        height: size_t,
        lo: *mut u8,
        loStride: size_t,
        hi: *mut u8,
        hiStride: size_t,
    );
}
extern "C" {
    pub fn SimdBackgroundIncrementCount(
        value: *const u8,
        valueStride: size_t,
        width: size_t,
        height: size_t,
        loValue: *const u8,
        loValueStride: size_t,
        hiValue: *const u8,
        hiValueStride: size_t,
        loCount: *mut u8,
        loCountStride: size_t,
        hiCount: *mut u8,
        hiCountStride: size_t,
    );
}
extern "C" {
    pub fn SimdBackgroundAdjustRange(
        loCount: *mut u8,
        loCountStride: size_t,
        width: size_t,
        height: size_t,
        loValue: *mut u8,
        loValueStride: size_t,
        hiCount: *mut u8,
        hiCountStride: size_t,
        hiValue: *mut u8,
        hiValueStride: size_t,
        threshold: u8,
    );
}
extern "C" {
    pub fn SimdBackgroundAdjustRangeMasked(
        loCount: *mut u8,
        loCountStride: size_t,
        width: size_t,
        height: size_t,
        loValue: *mut u8,
        loValueStride: size_t,
        hiCount: *mut u8,
        hiCountStride: size_t,
        hiValue: *mut u8,
        hiValueStride: size_t,
        threshold: u8,
        mask: *const u8,
        maskStride: size_t,
    );
}
extern "C" {
    pub fn SimdBackgroundShiftRange(
        value: *const u8,
        valueStride: size_t,
        width: size_t,
        height: size_t,
        lo: *mut u8,
        loStride: size_t,
        hi: *mut u8,
        hiStride: size_t,
    );
}
extern "C" {
    pub fn SimdBackgroundShiftRangeMasked(
        value: *const u8,
        valueStride: size_t,
        width: size_t,
        height: size_t,
        lo: *mut u8,
        loStride: size_t,
        hi: *mut u8,
        hiStride: size_t,
        mask: *const u8,
        maskStride: size_t,
    );
}
extern "C" {
    pub fn SimdBackgroundInitMask(
        src: *const u8,
        srcStride: size_t,
        width: size_t,
        height: size_t,
        index: u8,
        value: u8,
        dst: *mut u8,
        dstStride: size_t,
    );
}
extern "C" {
    pub fn SimdBase64Decode(src: *const u8, srcSize: size_t, dst: *mut u8, dstSize: *mut size_t);
}
extern "C" {
    pub fn SimdBase64Encode(src: *const u8, size: size_t, dst: *mut u8);
}
extern "C" {
    pub fn SimdBayerToBgr(
        bayer: *const u8,
        width: size_t,
        height: size_t,
        bayerStride: size_t,
        bayerFormat: SimdPixelFormatType,
        bgr: *mut u8,
        bgrStride: size_t,
    );
}
extern "C" {
    pub fn SimdBayerToBgra(
        bayer: *const u8,
        width: size_t,
        height: size_t,
        bayerStride: size_t,
        bayerFormat: SimdPixelFormatType,
        bgra: *mut u8,
        bgraStride: size_t,
        alpha: u8,
    );
}
extern "C" {
    pub fn SimdBgraToBayer(
        bgra: *const u8,
        width: size_t,
        height: size_t,
        bgraStride: size_t,
        bayer: *mut u8,
        bayerStride: size_t,
        bayerFormat: SimdPixelFormatType,
    );
}
extern "C" {
    pub fn SimdBgraToBgr(
        bgra: *const u8,
        width: size_t,
        height: size_t,
        bgraStride: size_t,
        bgr: *mut u8,
        bgrStride: size_t,
    );
}
extern "C" {
    pub fn SimdBgraToGray(
        bgra: *const u8,
        width: size_t,
        height: size_t,
        bgraStride: size_t,
        gray: *mut u8,
        grayStride: size_t,
    );
}
extern "C" {
    pub fn SimdBgraToRgb(
        bgra: *const u8,
        width: size_t,
        height: size_t,
        bgraStride: size_t,
        rgb: *mut u8,
        rgbStride: size_t,
    );
}
extern "C" {
    pub fn SimdBgraToRgba(
        bgra: *const u8,
        width: size_t,
        height: size_t,
        bgraStride: size_t,
        rgba: *mut u8,
        rgbaStride: size_t,
    );
}
extern "C" {
    pub fn SimdBgraToYuv420p(
        bgra: *const u8,
        width: size_t,
        height: size_t,
        bgraStride: size_t,
        y: *mut u8,
        yStride: size_t,
        u: *mut u8,
        uStride: size_t,
        v: *mut u8,
        vStride: size_t,
    );
}
extern "C" {
    pub fn SimdBgraToYuv420pV2(
        bgra: *const u8,
        bgraStride: size_t,
        width: size_t,
        height: size_t,
        y: *mut u8,
        yStride: size_t,
        u: *mut u8,
        uStride: size_t,
        v: *mut u8,
        vStride: size_t,
        yuvType: SimdYuvType,
    );
}
extern "C" {
    pub fn SimdBgraToYuv422p(
        bgra: *const u8,
        width: size_t,
        height: size_t,
        bgraStride: size_t,
        y: *mut u8,
        yStride: size_t,
        u: *mut u8,
        uStride: size_t,
        v: *mut u8,
        vStride: size_t,
    );
}
extern "C" {
    pub fn SimdBgraToYuv444p(
        bgra: *const u8,
        width: size_t,
        height: size_t,
        bgraStride: size_t,
        y: *mut u8,
        yStride: size_t,
        u: *mut u8,
        uStride: size_t,
        v: *mut u8,
        vStride: size_t,
    );
}
extern "C" {
    pub fn SimdBgraToYuv444pV2(
        bgra: *const u8,
        bgraStride: size_t,
        width: size_t,
        height: size_t,
        y: *mut u8,
        yStride: size_t,
        u: *mut u8,
        uStride: size_t,
        v: *mut u8,
        vStride: size_t,
        yuvType: SimdYuvType,
    );
}
extern "C" {
    pub fn SimdBgraToYuva420p(
        bgra: *const u8,
        bgraStride: size_t,
        width: size_t,
        height: size_t,
        y: *mut u8,
        yStride: size_t,
        u: *mut u8,
        uStride: size_t,
        v: *mut u8,
        vStride: size_t,
        a: *mut u8,
        aStride: size_t,
    );
}
extern "C" {
    pub fn SimdBgrToBayer(
        bgr: *const u8,
        width: size_t,
        height: size_t,
        bgrStride: size_t,
        bayer: *mut u8,
        bayerStride: size_t,
        bayerFormat: SimdPixelFormatType,
    );
}
extern "C" {
    pub fn SimdBgrToBgra(
        bgr: *const u8,
        width: size_t,
        height: size_t,
        bgrStride: size_t,
        bgra: *mut u8,
        bgraStride: size_t,
        alpha: u8,
    );
}
extern "C" {
    pub fn SimdBgr48pToBgra32(
        blue: *const u8,
        blueStride: size_t,
        width: size_t,
        height: size_t,
        green: *const u8,
        greenStride: size_t,
        red: *const u8,
        redStride: size_t,
        bgra: *mut u8,
        bgraStride: size_t,
        alpha: u8,
    );
}
extern "C" {
    pub fn SimdBgrToGray(
        bgr: *const u8,
        width: size_t,
        height: size_t,
        bgrStride: size_t,
        gray: *mut u8,
        grayStride: size_t,
    );
}
extern "C" {
    pub fn SimdBgrToHsl(
        bgr: *const u8,
        width: size_t,
        height: size_t,
        bgrStride: size_t,
        hsl: *mut u8,
        hslStride: size_t,
    );
}
extern "C" {
    pub fn SimdBgrToHsv(
        bgr: *const u8,
        width: size_t,
        height: size_t,
        bgrStride: size_t,
        hsv: *mut u8,
        hsvStride: size_t,
    );
}
extern "C" {
    pub fn SimdBgrToRgb(
        bgr: *const u8,
        width: size_t,
        height: size_t,
        bgrStride: size_t,
        rgb: *mut u8,
        rgbStride: size_t,
    );
}
extern "C" {
    pub fn SimdBgrToYuv420p(
        bgr: *const u8,
        width: size_t,
        height: size_t,
        bgrStride: size_t,
        y: *mut u8,
        yStride: size_t,
        u: *mut u8,
        uStride: size_t,
        v: *mut u8,
        vStride: size_t,
    );
}
extern "C" {
    pub fn SimdBgrToYuv422p(
        bgr: *const u8,
        width: size_t,
        height: size_t,
        bgrStride: size_t,
        y: *mut u8,
        yStride: size_t,
        u: *mut u8,
        uStride: size_t,
        v: *mut u8,
        vStride: size_t,
    );
}
extern "C" {
    pub fn SimdBgrToYuv444p(
        bgr: *const u8,
        width: size_t,
        height: size_t,
        bgrStride: size_t,
        y: *mut u8,
        yStride: size_t,
        u: *mut u8,
        uStride: size_t,
        v: *mut u8,
        vStride: size_t,
    );
}
extern "C" {
    pub fn SimdBinarization(
        src: *const u8,
        srcStride: size_t,
        width: size_t,
        height: size_t,
        value: u8,
        positive: u8,
        negative: u8,
        dst: *mut u8,
        dstStride: size_t,
        compareType: SimdCompareType,
    );
}
extern "C" {
    pub fn SimdAveragingBinarization(
        src: *const u8,
        srcStride: size_t,
        width: size_t,
        height: size_t,
        value: u8,
        neighborhood: size_t,
        threshold: u8,
        positive: u8,
        negative: u8,
        dst: *mut u8,
        dstStride: size_t,
        compareType: SimdCompareType,
    );
}
extern "C" {
    pub fn SimdAveragingBinarizationV2(
        src: *const u8,
        srcStride: size_t,
        width: size_t,
        height: size_t,
        neighborhood: size_t,
        shift: i32,
        positive: u8,
        negative: u8,
        dst: *mut u8,
        dstStride: size_t,
    );
}
extern "C" {
    pub fn SimdConditionalCount8u(
        src: *const u8,
        stride: size_t,
        width: size_t,
        height: size_t,
        value: u8,
        compareType: SimdCompareType,
        count: *mut u32,
    );
}
extern "C" {
    pub fn SimdConditionalCount16i(
        src: *const u8,
        stride: size_t,
        width: size_t,
        height: size_t,
        value: i16,
        compareType: SimdCompareType,
        count: *mut u32,
    );
}
extern "C" {
    pub fn SimdConditionalSum(
        src: *const u8,
        srcStride: size_t,
        width: size_t,
        height: size_t,
        mask: *const u8,
        maskStride: size_t,
        value: u8,
        compareType: SimdCompareType,
        sum: *mut u64,
    );
}
extern "C" {
    pub fn SimdConditionalSquareSum(
        src: *const u8,
        srcStride: size_t,
        width: size_t,
        height: size_t,
        mask: *const u8,
        maskStride: size_t,
        value: u8,
        compareType: SimdCompareType,
        sum: *mut u64,
    );
}
extern "C" {
    pub fn SimdConditionalSquareGradientSum(
        src: *const u8,
        srcStride: size_t,
        width: size_t,
        height: size_t,
        mask: *const u8,
        maskStride: size_t,
        value: u8,
        compareType: SimdCompareType,
        sum: *mut u64,
    );
}
extern "C" {
    pub fn SimdConditionalFill(
        src: *const u8,
        srcStride: size_t,
        width: size_t,
        height: size_t,
        threshold: u8,
        compareType: SimdCompareType,
        value: u8,
        dst: *mut u8,
        dstStride: size_t,
    );
}
extern "C" {
    pub fn SimdCopy(
        src: *const u8,
        srcStride: size_t,
        width: size_t,
        height: size_t,
        pixelSize: size_t,
        dst: *mut u8,
        dstStride: size_t,
    );
}
extern "C" {
    pub fn SimdCopyFrame(
        src: *const u8,
        srcStride: size_t,
        width: size_t,
        height: size_t,
        pixelSize: size_t,
        frameLeft: size_t,
        frameTop: size_t,
        frameRight: size_t,
        frameBottom: size_t,
        dst: *mut u8,
        dstStride: size_t,
    );
}
extern "C" {
    pub fn SimdDeinterleaveUv(
        uv: *const u8,
        uvStride: size_t,
        width: size_t,
        height: size_t,
        u: *mut u8,
        uStride: size_t,
        v: *mut u8,
        vStride: size_t,
    );
}
extern "C" {
    pub fn SimdDeinterleaveBgr(
        bgr: *const u8,
        bgrStride: size_t,
        width: size_t,
        height: size_t,
        b: *mut u8,
        bStride: size_t,
        g: *mut u8,
        gStride: size_t,
        r: *mut u8,
        rStride: size_t,
    );
}
extern "C" {
    pub fn SimdDeinterleaveBgra(
        bgra: *const u8,
        bgraStride: size_t,
        width: size_t,
        height: size_t,
        b: *mut u8,
        bStride: size_t,
        g: *mut u8,
        gStride: size_t,
        r: *mut u8,
        rStride: size_t,
        a: *mut u8,
        aStride: size_t,
    );
}
extern "C" {
    pub fn SimdDetectionLoadA(path: *const ::std::os::raw::c_char) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn SimdDetectionLoadStringXml(
        xml: *mut ::std::os::raw::c_char,
    ) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn SimdDetectionInfo(
        data: *const ::std::os::raw::c_void,
        width: *mut size_t,
        height: *mut size_t,
        flags: *mut SimdDetectionInfoFlags,
    );
}
extern "C" {
    pub fn SimdDetectionInit(
        data: *const ::std::os::raw::c_void,
        sum: *mut u8,
        sumStride: size_t,
        width: size_t,
        height: size_t,
        sqsum: *mut u8,
        sqsumStride: size_t,
        tilted: *mut u8,
        tiltedStride: size_t,
        throughColumn: ::std::os::raw::c_int,
        int16: ::std::os::raw::c_int,
    ) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn SimdDetectionPrepare(hid: *mut ::std::os::raw::c_void);
}
extern "C" {
    pub fn SimdDetectionHaarDetect32fp(
        hid: *const ::std::os::raw::c_void,
        mask: *const u8,
        maskStride: size_t,
        left: isize,
        top: isize,
        right: isize,
        bottom: isize,
        dst: *mut u8,
        dstStride: size_t,
    );
}
extern "C" {
    pub fn SimdDetectionHaarDetect32fi(
        hid: *const ::std::os::raw::c_void,
        mask: *const u8,
        maskStride: size_t,
        left: isize,
        top: isize,
        right: isize,
        bottom: isize,
        dst: *mut u8,
        dstStride: size_t,
    );
}
extern "C" {
    pub fn SimdDetectionLbpDetect32fp(
        hid: *const ::std::os::raw::c_void,
        mask: *const u8,
        maskStride: size_t,
        left: isize,
        top: isize,
        right: isize,
        bottom: isize,
        dst: *mut u8,
        dstStride: size_t,
    );
}
extern "C" {
    pub fn SimdDetectionLbpDetect32fi(
        hid: *const ::std::os::raw::c_void,
        mask: *const u8,
        maskStride: size_t,
        left: isize,
        top: isize,
        right: isize,
        bottom: isize,
        dst: *mut u8,
        dstStride: size_t,
    );
}
extern "C" {
    pub fn SimdDetectionLbpDetect16ip(
        hid: *const ::std::os::raw::c_void,
        mask: *const u8,
        maskStride: size_t,
        left: isize,
        top: isize,
        right: isize,
        bottom: isize,
        dst: *mut u8,
        dstStride: size_t,
    );
}
extern "C" {
    pub fn SimdDetectionLbpDetect16ii(
        hid: *const ::std::os::raw::c_void,
        mask: *const u8,
        maskStride: size_t,
        left: isize,
        top: isize,
        right: isize,
        bottom: isize,
        dst: *mut u8,
        dstStride: size_t,
    );
}
extern "C" {
    pub fn SimdEdgeBackgroundGrowRangeSlow(
        value: *const u8,
        valueStride: size_t,
        width: size_t,
        height: size_t,
        background: *mut u8,
        backgroundStride: size_t,
    );
}
extern "C" {
    pub fn SimdEdgeBackgroundGrowRangeFast(
        value: *const u8,
        valueStride: size_t,
        width: size_t,
        height: size_t,
        background: *mut u8,
        backgroundStride: size_t,
    );
}
extern "C" {
    pub fn SimdEdgeBackgroundIncrementCount(
        value: *const u8,
        valueStride: size_t,
        width: size_t,
        height: size_t,
        backgroundValue: *const u8,
        backgroundValueStride: size_t,
        backgroundCount: *mut u8,
        backgroundCountStride: size_t,
    );
}
extern "C" {
    pub fn SimdEdgeBackgroundAdjustRange(
        backgroundCount: *mut u8,
        backgroundCountStride: size_t,
        width: size_t,
        height: size_t,
        backgroundValue: *mut u8,
        backgroundValueStride: size_t,
        threshold: u8,
    );
}
extern "C" {
    pub fn SimdEdgeBackgroundAdjustRangeMasked(
        backgroundCount: *mut u8,
        backgroundCountStride: size_t,
        width: size_t,
        height: size_t,
        backgroundValue: *mut u8,
        backgroundValueStride: size_t,
        threshold: u8,
        mask: *const u8,
        maskStride: size_t,
    );
}
extern "C" {
    pub fn SimdEdgeBackgroundShiftRange(
        value: *const u8,
        valueStride: size_t,
        width: size_t,
        height: size_t,
        background: *mut u8,
        backgroundStride: size_t,
    );
}
extern "C" {
    pub fn SimdEdgeBackgroundShiftRangeMasked(
        value: *const u8,
        valueStride: size_t,
        width: size_t,
        height: size_t,
        background: *mut u8,
        backgroundStride: size_t,
        mask: *const u8,
        maskStride: size_t,
    );
}
extern "C" {
    pub fn SimdFill(
        dst: *mut u8,
        stride: size_t,
        width: size_t,
        height: size_t,
        pixelSize: size_t,
        value: u8,
    );
}
extern "C" {
    pub fn SimdFillFrame(
        dst: *mut u8,
        stride: size_t,
        width: size_t,
        height: size_t,
        pixelSize: size_t,
        frameLeft: size_t,
        frameTop: size_t,
        frameRight: size_t,
        frameBottom: size_t,
        value: u8,
    );
}
extern "C" {
    pub fn SimdFillBgr(
        dst: *mut u8,
        stride: size_t,
        width: size_t,
        height: size_t,
        blue: u8,
        green: u8,
        red: u8,
    );
}
extern "C" {
    pub fn SimdFillBgra(
        dst: *mut u8,
        stride: size_t,
        width: size_t,
        height: size_t,
        blue: u8,
        green: u8,
        red: u8,
        alpha: u8,
    );
}
extern "C" {
    pub fn SimdFillPixel(
        dst: *mut u8,
        stride: size_t,
        width: size_t,
        height: size_t,
        pixel: *const u8,
        pixelSize: size_t,
    );
}
extern "C" {
    pub fn SimdFill32f(dst: *mut f32, size: size_t, value: *const f32);
}
extern "C" {
    pub fn SimdFloat32ToBFloat16(src: *const f32, size: size_t, dst: *mut u16);
}
extern "C" {
    pub fn SimdBFloat16ToFloat32(src: *const u16, size: size_t, dst: *mut f32);
}
extern "C" {
    pub fn SimdFloat32ToFloat16(src: *const f32, size: size_t, dst: *mut u16);
}
extern "C" {
    pub fn SimdFloat16ToFloat32(src: *const u16, size: size_t, dst: *mut f32);
}
extern "C" {
    pub fn SimdSquaredDifferenceSum16f(a: *const u16, b: *const u16, size: size_t, sum: *mut f32);
}
extern "C" {
    pub fn SimdCosineDistance16f(a: *const u16, b: *const u16, size: size_t, distance: *mut f32);
}
extern "C" {
    pub fn SimdCosineDistancesMxNa16f(
        M: size_t,
        N: size_t,
        K: size_t,
        A: *const *const u16,
        B: *const *const u16,
        distances: *mut f32,
    );
}
extern "C" {
    pub fn SimdCosineDistancesMxNp16f(
        M: size_t,
        N: size_t,
        K: size_t,
        A: *const u16,
        B: *const u16,
        distances: *mut f32,
    );
}
extern "C" {
    pub fn SimdVectorNormNa16f(N: size_t, K: size_t, A: *const *const u16, norms: *mut f32);
}
extern "C" {
    pub fn SimdVectorNormNp16f(N: size_t, K: size_t, A: *const u16, norms: *mut f32);
}
extern "C" {
    pub fn SimdFloat32ToUint8(
        src: *const f32,
        size: size_t,
        lower: *const f32,
        upper: *const f32,
        dst: *mut u8,
    );
}
extern "C" {
    pub fn SimdUint8ToFloat32(
        src: *const u8,
        size: size_t,
        lower: *const f32,
        upper: *const f32,
        dst: *mut f32,
    );
}
extern "C" {
    pub fn SimdCosineDistance32f(a: *const f32, b: *const f32, size: size_t, distance: *mut f32);
}
extern "C" {
    pub fn SimdGaussianBlur3x3(
        src: *const u8,
        srcStride: size_t,
        width: size_t,
        height: size_t,
        channelCount: size_t,
        dst: *mut u8,
        dstStride: size_t,
    );
}
extern "C" {
    pub fn SimdGaussianBlurInit(
        width: size_t,
        height: size_t,
        channels: size_t,
        sigma: *const f32,
        epsilon: *const f32,
    ) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn SimdGaussianBlurRun(
        filter: *const ::std::os::raw::c_void,
        src: *const u8,
        srcStride: size_t,
        dst: *mut u8,
        dstStride: size_t,
    );
}
extern "C" {
    pub fn SimdGemm32fNN(
        M: size_t,
        N: size_t,
        K: size_t,
        alpha: *const f32,
        A: *const f32,
        lda: size_t,
        B: *const f32,
        ldb: size_t,
        beta: *const f32,
        C: *mut f32,
        ldc: size_t,
    );
}
extern "C" {
    pub fn SimdGemm32fNT(
        M: size_t,
        N: size_t,
        K: size_t,
        alpha: *const f32,
        A: *const f32,
        lda: size_t,
        B: *const f32,
        ldb: size_t,
        beta: *const f32,
        C: *mut f32,
        ldc: size_t,
    );
}
extern "C" {
    pub fn SimdGrayToBgr(
        gray: *const u8,
        width: size_t,
        height: size_t,
        grayStride: size_t,
        bgr: *mut u8,
        bgrStride: size_t,
    );
}
extern "C" {
    pub fn SimdGrayToBgra(
        gray: *const u8,
        width: size_t,
        height: size_t,
        grayStride: size_t,
        bgra: *mut u8,
        bgraStride: size_t,
        alpha: u8,
    );
}
extern "C" {
    pub fn SimdAbsSecondDerivativeHistogram(
        src: *const u8,
        width: size_t,
        height: size_t,
        stride: size_t,
        step: size_t,
        indent: size_t,
        histogram: *mut u32,
    );
}
extern "C" {
    pub fn SimdHistogram(
        src: *const u8,
        width: size_t,
        height: size_t,
        stride: size_t,
        histogram: *mut u32,
    );
}
extern "C" {
    pub fn SimdHistogramMasked(
        src: *const u8,
        srcStride: size_t,
        width: size_t,
        height: size_t,
        mask: *const u8,
        maskStride: size_t,
        index: u8,
        histogram: *mut u32,
    );
}
extern "C" {
    pub fn SimdHistogramConditional(
        src: *const u8,
        srcStride: size_t,
        width: size_t,
        height: size_t,
        mask: *const u8,
        maskStride: size_t,
        value: u8,
        compareType: SimdCompareType,
        histogram: *mut u32,
    );
}
extern "C" {
    pub fn SimdNormalizedColors(histogram: *const u32, colors: *mut u8);
}
extern "C" {
    pub fn SimdChangeColors(
        src: *const u8,
        srcStride: size_t,
        width: size_t,
        height: size_t,
        colors: *const u8,
        dst: *mut u8,
        dstStride: size_t,
    );
}
extern "C" {
    pub fn SimdNormalizeHistogram(
        src: *const u8,
        srcStride: size_t,
        width: size_t,
        height: size_t,
        dst: *mut u8,
        dstStride: size_t,
    );
}
extern "C" {
    pub fn SimdHogDirectionHistograms(
        src: *const u8,
        stride: size_t,
        width: size_t,
        height: size_t,
        cellX: size_t,
        cellY: size_t,
        quantization: size_t,
        histograms: *mut f32,
    );
}
extern "C" {
    pub fn SimdHogExtractFeatures(
        src: *const u8,
        stride: size_t,
        width: size_t,
        height: size_t,
        features: *mut f32,
    );
}
extern "C" {
    pub fn SimdHogDeinterleave(
        src: *const f32,
        srcStride: size_t,
        width: size_t,
        height: size_t,
        count: size_t,
        dst: *mut *mut f32,
        dstStride: size_t,
    );
}
extern "C" {
    pub fn SimdHogFilterSeparable(
        src: *const f32,
        srcStride: size_t,
        width: size_t,
        height: size_t,
        rowFilter: *const f32,
        rowSize: size_t,
        colFilter: *const f32,
        colSize: size_t,
        dst: *mut f32,
        dstStride: size_t,
        add: ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn SimdHogLiteExtractFeatures(
        src: *const u8,
        srcStride: size_t,
        width: size_t,
        height: size_t,
        cell: size_t,
        features: *mut f32,
        featuresStride: size_t,
    );
}
extern "C" {
    pub fn SimdHogLiteFilterFeatures(
        src: *const f32,
        srcStride: size_t,
        srcWidth: size_t,
        srcHeight: size_t,
        featureSize: size_t,
        filter: *const f32,
        filterWidth: size_t,
        filterHeight: size_t,
        mask: *const u32,
        maskStride: size_t,
        dst: *mut f32,
        dstStride: size_t,
    );
}
extern "C" {
    pub fn SimdHogLiteResizeFeatures(
        src: *const f32,
        srcStride: size_t,
        srcWidth: size_t,
        srcHeight: size_t,
        featureSize: size_t,
        dst: *mut f32,
        dstStride: size_t,
        dstWidth: size_t,
        dstHeight: size_t,
    );
}
extern "C" {
    pub fn SimdHogLiteCompressFeatures(
        src: *const f32,
        srcStride: size_t,
        width: size_t,
        height: size_t,
        pca: *const f32,
        dst: *mut f32,
        dstStride: size_t,
    );
}
extern "C" {
    pub fn SimdHogLiteFilterSeparable(
        src: *const f32,
        srcStride: size_t,
        srcWidth: size_t,
        srcHeight: size_t,
        featureSize: size_t,
        hFilter: *const f32,
        hSize: size_t,
        vFilter: *const f32,
        vSize: size_t,
        dst: *mut f32,
        dstStride: size_t,
        add: ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn SimdHogLiteFindMax7x7(
        a: *const f32,
        aStride: size_t,
        b: *const f32,
        bStride: size_t,
        height: size_t,
        value: *mut f32,
        col: *mut size_t,
        row: *mut size_t,
    );
}
extern "C" {
    pub fn SimdHogLiteCreateMask(
        src: *const f32,
        srcStride: size_t,
        srcWidth: size_t,
        srcHeight: size_t,
        threshold: *const f32,
        scale: size_t,
        size: size_t,
        dst: *mut u32,
        dstStride: size_t,
    );
}
extern "C" {
    pub fn SimdImageSaveToMemory(
        src: *const u8,
        stride: size_t,
        width: size_t,
        height: size_t,
        format: SimdPixelFormatType,
        file: SimdImageFileType,
        quality: ::std::os::raw::c_int,
        size: *mut size_t,
    ) -> *mut u8;
}
extern "C" {
    pub fn SimdImageSaveToFile(
        src: *const u8,
        stride: size_t,
        width: size_t,
        height: size_t,
        format: SimdPixelFormatType,
        file: SimdImageFileType,
        quality: ::std::os::raw::c_int,
        path: *const ::std::os::raw::c_char,
    ) -> SimdBool;
}
extern "C" {
    pub fn SimdNv12SaveAsJpegToMemory(
        y: *const u8,
        yStride: size_t,
        uv: *const u8,
        uvStride: size_t,
        width: size_t,
        height: size_t,
        yuvType: SimdYuvType,
        quality: ::std::os::raw::c_int,
        size: *mut size_t,
    ) -> *mut u8;
}
extern "C" {
    pub fn SimdYuv420pSaveAsJpegToMemory(
        y: *const u8,
        yStride: size_t,
        u: *const u8,
        uStride: size_t,
        v: *const u8,
        vStride: size_t,
        width: size_t,
        height: size_t,
        yuvType: SimdYuvType,
        quality: ::std::os::raw::c_int,
        size: *mut size_t,
    ) -> *mut u8;
}
extern "C" {
    pub fn SimdImageLoadFromMemory(
        data: *const u8,
        size: size_t,
        stride: *mut size_t,
        width: *mut size_t,
        height: *mut size_t,
        format: *mut SimdPixelFormatType,
    ) -> *mut u8;
}
extern "C" {
    pub fn SimdImageLoadFromFile(
        path: *const ::std::os::raw::c_char,
        stride: *mut size_t,
        width: *mut size_t,
        height: *mut size_t,
        format: *mut SimdPixelFormatType,
    ) -> *mut u8;
}
extern "C" {
    pub fn SimdInt16ToGray(
        src: *const u8,
        width: size_t,
        height: size_t,
        srcStride: size_t,
        dst: *mut u8,
        dstStride: size_t,
    );
}
extern "C" {
    pub fn SimdIntegral(
        src: *const u8,
        srcStride: size_t,
        width: size_t,
        height: size_t,
        sum: *mut u8,
        sumStride: size_t,
        sqsum: *mut u8,
        sqsumStride: size_t,
        tilted: *mut u8,
        tiltedStride: size_t,
        sumFormat: SimdPixelFormatType,
        sqsumFormat: SimdPixelFormatType,
    );
}
extern "C" {
    pub fn SimdInterferenceIncrement(
        statistic: *mut u8,
        stride: size_t,
        width: size_t,
        height: size_t,
        increment: u8,
        saturation: i16,
    );
}
extern "C" {
    pub fn SimdInterferenceIncrementMasked(
        statistic: *mut u8,
        statisticStride: size_t,
        width: size_t,
        height: size_t,
        increment: u8,
        saturation: i16,
        mask: *const u8,
        maskStride: size_t,
        index: u8,
    );
}
extern "C" {
    pub fn SimdInterferenceDecrement(
        statistic: *mut u8,
        stride: size_t,
        width: size_t,
        height: size_t,
        decrement: u8,
        saturation: i16,
    );
}
extern "C" {
    pub fn SimdInterferenceDecrementMasked(
        statistic: *mut u8,
        statisticStride: size_t,
        width: size_t,
        height: size_t,
        decrement: u8,
        saturation: i16,
        mask: *const u8,
        maskStride: size_t,
        index: u8,
    );
}
extern "C" {
    pub fn SimdInterleaveUv(
        u: *const u8,
        uStride: size_t,
        v: *const u8,
        vStride: size_t,
        width: size_t,
        height: size_t,
        uv: *mut u8,
        uvStride: size_t,
    );
}
extern "C" {
    pub fn SimdInterleaveBgr(
        b: *const u8,
        bStride: size_t,
        g: *const u8,
        gStride: size_t,
        r: *const u8,
        rStride: size_t,
        width: size_t,
        height: size_t,
        bgr: *mut u8,
        bgrStride: size_t,
    );
}
extern "C" {
    pub fn SimdInterleaveBgra(
        b: *const u8,
        bStride: size_t,
        g: *const u8,
        gStride: size_t,
        r: *const u8,
        rStride: size_t,
        a: *const u8,
        aStride: size_t,
        width: size_t,
        height: size_t,
        bgra: *mut u8,
        bgraStride: size_t,
    );
}
extern "C" {
    pub fn SimdLaplace(
        src: *const u8,
        srcStride: size_t,
        width: size_t,
        height: size_t,
        dst: *mut u8,
        dstStride: size_t,
    );
}
extern "C" {
    pub fn SimdLaplaceAbs(
        src: *const u8,
        srcStride: size_t,
        width: size_t,
        height: size_t,
        dst: *mut u8,
        dstStride: size_t,
    );
}
extern "C" {
    pub fn SimdLaplaceAbsSum(
        src: *const u8,
        stride: size_t,
        width: size_t,
        height: size_t,
        sum: *mut u64,
    );
}
extern "C" {
    pub fn SimdLbpEstimate(
        src: *const u8,
        srcStride: size_t,
        width: size_t,
        height: size_t,
        dst: *mut u8,
        dstStride: size_t,
    );
}
extern "C" {
    pub fn SimdMeanFilter3x3(
        src: *const u8,
        srcStride: size_t,
        width: size_t,
        height: size_t,
        channelCount: size_t,
        dst: *mut u8,
        dstStride: size_t,
    );
}
extern "C" {
    pub fn SimdMedianFilterRhomb3x3(
        src: *const u8,
        srcStride: size_t,
        width: size_t,
        height: size_t,
        channelCount: size_t,
        dst: *mut u8,
        dstStride: size_t,
    );
}
extern "C" {
    pub fn SimdMedianFilterRhomb5x5(
        src: *const u8,
        srcStride: size_t,
        width: size_t,
        height: size_t,
        channelCount: size_t,
        dst: *mut u8,
        dstStride: size_t,
    );
}
extern "C" {
    pub fn SimdMedianFilterSquare3x3(
        src: *const u8,
        srcStride: size_t,
        width: size_t,
        height: size_t,
        channelCount: size_t,
        dst: *mut u8,
        dstStride: size_t,
    );
}
extern "C" {
    pub fn SimdMedianFilterSquare5x5(
        src: *const u8,
        srcStride: size_t,
        width: size_t,
        height: size_t,
        channelCount: size_t,
        dst: *mut u8,
        dstStride: size_t,
    );
}
extern "C" {
    pub fn SimdNeuralConvert(
        src: *const u8,
        srcStride: size_t,
        width: size_t,
        height: size_t,
        dst: *mut f32,
        dstStride: size_t,
        inversion: ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn SimdNeuralRoughSigmoid(src: *const f32, size: size_t, slope: *const f32, dst: *mut f32);
}
extern "C" {
    pub fn SimdNeuralRoughSigmoid2(src: *const f32, size: size_t, slope: *const f32, dst: *mut f32);
}
extern "C" {
    pub fn SimdNeuralDerivativeSigmoid(
        src: *const f32,
        size: size_t,
        slope: *const f32,
        dst: *mut f32,
    );
}
extern "C" {
    pub fn SimdNeuralRoughTanh(src: *const f32, size: size_t, slope: *const f32, dst: *mut f32);
}
extern "C" {
    pub fn SimdNeuralDerivativeTanh(
        src: *const f32,
        size: size_t,
        slope: *const f32,
        dst: *mut f32,
    );
}
extern "C" {
    pub fn SimdNeuralDerivativeRelu(
        src: *const f32,
        size: size_t,
        slope: *const f32,
        dst: *mut f32,
    );
}
extern "C" {
    pub fn SimdNeuralPow(src: *const f32, size: size_t, exponent: *const f32, dst: *mut f32);
}
extern "C" {
    pub fn SimdNeuralProductSum(a: *const f32, b: *const f32, size: size_t, sum: *mut f32);
}
extern "C" {
    pub fn SimdNeuralAddVectorMultipliedByValue(
        src: *const f32,
        size: size_t,
        value: *const f32,
        dst: *mut f32,
    );
}
extern "C" {
    pub fn SimdNeuralAddVector(src: *const f32, size: size_t, dst: *mut f32);
}
extern "C" {
    pub fn SimdNeuralAddValue(value: *const f32, dst: *mut f32, size: size_t);
}
extern "C" {
    pub fn SimdNeuralUpdateWeights(
        x: *const f32,
        size: size_t,
        a: *const f32,
        b: *const f32,
        d: *mut f32,
        w: *mut f32,
    );
}
extern "C" {
    pub fn SimdNeuralAdaptiveGradientUpdate(
        delta: *const f32,
        size: size_t,
        batch: size_t,
        alpha: *const f32,
        epsilon: *const f32,
        gradient: *mut f32,
        weight: *mut f32,
    );
}
extern "C" {
    pub fn SimdNeuralAddConvolution2x2Forward(
        src: *const f32,
        srcStride: size_t,
        width: size_t,
        height: size_t,
        weights: *const f32,
        dst: *mut f32,
        dstStride: size_t,
    );
}
extern "C" {
    pub fn SimdNeuralAddConvolution3x3Forward(
        src: *const f32,
        srcStride: size_t,
        width: size_t,
        height: size_t,
        weights: *const f32,
        dst: *mut f32,
        dstStride: size_t,
    );
}
extern "C" {
    pub fn SimdNeuralAddConvolution4x4Forward(
        src: *const f32,
        srcStride: size_t,
        width: size_t,
        height: size_t,
        weights: *const f32,
        dst: *mut f32,
        dstStride: size_t,
    );
}
extern "C" {
    pub fn SimdNeuralAddConvolution5x5Forward(
        src: *const f32,
        srcStride: size_t,
        width: size_t,
        height: size_t,
        weights: *const f32,
        dst: *mut f32,
        dstStride: size_t,
    );
}
extern "C" {
    pub fn SimdNeuralAddConvolution2x2Backward(
        src: *const f32,
        srcStride: size_t,
        width: size_t,
        height: size_t,
        weights: *const f32,
        dst: *mut f32,
        dstStride: size_t,
    );
}
extern "C" {
    pub fn SimdNeuralAddConvolution3x3Backward(
        src: *const f32,
        srcStride: size_t,
        width: size_t,
        height: size_t,
        weights: *const f32,
        dst: *mut f32,
        dstStride: size_t,
    );
}
extern "C" {
    pub fn SimdNeuralAddConvolution4x4Backward(
        src: *const f32,
        srcStride: size_t,
        width: size_t,
        height: size_t,
        weights: *const f32,
        dst: *mut f32,
        dstStride: size_t,
    );
}
extern "C" {
    pub fn SimdNeuralAddConvolution5x5Backward(
        src: *const f32,
        srcStride: size_t,
        width: size_t,
        height: size_t,
        weights: *const f32,
        dst: *mut f32,
        dstStride: size_t,
    );
}
extern "C" {
    pub fn SimdNeuralAddConvolution2x2Sum(
        src: *const f32,
        srcStride: size_t,
        dst: *const f32,
        dstStride: size_t,
        width: size_t,
        height: size_t,
        sums: *mut f32,
    );
}
extern "C" {
    pub fn SimdNeuralAddConvolution3x3Sum(
        src: *const f32,
        srcStride: size_t,
        dst: *const f32,
        dstStride: size_t,
        width: size_t,
        height: size_t,
        sums: *mut f32,
    );
}
extern "C" {
    pub fn SimdNeuralAddConvolution4x4Sum(
        src: *const f32,
        srcStride: size_t,
        dst: *const f32,
        dstStride: size_t,
        width: size_t,
        height: size_t,
        sums: *mut f32,
    );
}
extern "C" {
    pub fn SimdNeuralAddConvolution5x5Sum(
        src: *const f32,
        srcStride: size_t,
        dst: *const f32,
        dstStride: size_t,
        width: size_t,
        height: size_t,
        sums: *mut f32,
    );
}
extern "C" {
    pub fn SimdNeuralPooling1x1Max3x3(
        src: *const f32,
        srcStride: size_t,
        width: size_t,
        height: size_t,
        dst: *mut f32,
        dstStride: size_t,
    );
}
extern "C" {
    pub fn SimdNeuralPooling2x2Max2x2(
        src: *const f32,
        srcStride: size_t,
        width: size_t,
        height: size_t,
        dst: *mut f32,
        dstStride: size_t,
    );
}
extern "C" {
    pub fn SimdNeuralPooling2x2Max3x3(
        src: *const f32,
        srcStride: size_t,
        width: size_t,
        height: size_t,
        dst: *mut f32,
        dstStride: size_t,
    );
}
extern "C" {
    pub fn SimdNeuralConvolutionForward(
        src: *const f32,
        srcWidth: size_t,
        srcHeight: size_t,
        srcDepth: size_t,
        weight: *const f32,
        kernelX: size_t,
        kernelY: size_t,
        padX: size_t,
        padY: size_t,
        strideX: size_t,
        strideY: size_t,
        dilationX: size_t,
        dilationY: size_t,
        buffer: *mut ::std::os::raw::c_void,
        size: *mut size_t,
        dst: *mut f32,
        dstWidth: size_t,
        dstHeight: size_t,
        dstDepth: size_t,
        add: ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn SimdOperationBinary8u(
        a: *const u8,
        aStride: size_t,
        b: *const u8,
        bStride: size_t,
        width: size_t,
        height: size_t,
        channelCount: size_t,
        dst: *mut u8,
        dstStride: size_t,
        type_: SimdOperationBinary8uType,
    );
}
extern "C" {
    pub fn SimdOperationBinary16i(
        a: *const u8,
        aStride: size_t,
        b: *const u8,
        bStride: size_t,
        width: size_t,
        height: size_t,
        dst: *mut u8,
        dstStride: size_t,
        type_: SimdOperationBinary16iType,
    );
}
extern "C" {
    pub fn SimdVectorProduct(
        vertical: *const u8,
        horizontal: *const u8,
        dst: *mut u8,
        stride: size_t,
        width: size_t,
        height: size_t,
    );
}
extern "C" {
    pub fn SimdReduceColor2x2(
        src: *const u8,
        srcWidth: size_t,
        srcHeight: size_t,
        srcStride: size_t,
        dst: *mut u8,
        dstWidth: size_t,
        dstHeight: size_t,
        dstStride: size_t,
        channelCount: size_t,
    );
}
extern "C" {
    pub fn SimdReduceGray2x2(
        src: *const u8,
        srcWidth: size_t,
        srcHeight: size_t,
        srcStride: size_t,
        dst: *mut u8,
        dstWidth: size_t,
        dstHeight: size_t,
        dstStride: size_t,
    );
}
extern "C" {
    pub fn SimdReduceGray3x3(
        src: *const u8,
        srcWidth: size_t,
        srcHeight: size_t,
        srcStride: size_t,
        dst: *mut u8,
        dstWidth: size_t,
        dstHeight: size_t,
        dstStride: size_t,
        compensation: ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn SimdReduceGray4x4(
        src: *const u8,
        srcWidth: size_t,
        srcHeight: size_t,
        srcStride: size_t,
        dst: *mut u8,
        dstWidth: size_t,
        dstHeight: size_t,
        dstStride: size_t,
    );
}
extern "C" {
    pub fn SimdReduceGray5x5(
        src: *const u8,
        srcWidth: size_t,
        srcHeight: size_t,
        srcStride: size_t,
        dst: *mut u8,
        dstWidth: size_t,
        dstHeight: size_t,
        dstStride: size_t,
        compensation: ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn SimdReorder16bit(src: *const u8, size: size_t, dst: *mut u8);
}
extern "C" {
    pub fn SimdReorder32bit(src: *const u8, size: size_t, dst: *mut u8);
}
extern "C" {
    pub fn SimdReorder64bit(src: *const u8, size: size_t, dst: *mut u8);
}
extern "C" {
    pub fn SimdResizeBilinear(
        src: *const u8,
        srcWidth: size_t,
        srcHeight: size_t,
        srcStride: size_t,
        dst: *mut u8,
        dstWidth: size_t,
        dstHeight: size_t,
        dstStride: size_t,
        channelCount: size_t,
    );
}
extern "C" {
    pub fn SimdResizerInit(
        srcX: size_t,
        srcY: size_t,
        dstX: size_t,
        dstY: size_t,
        channels: size_t,
        type_: SimdResizeChannelType,
        method: SimdResizeMethodType,
    ) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn SimdResizerRun(
        resizer: *const ::std::os::raw::c_void,
        src: *const u8,
        srcStride: size_t,
        dst: *mut u8,
        dstStride: size_t,
    );
}
extern "C" {
    pub fn SimdRgbToBgra(
        rgb: *const u8,
        width: size_t,
        height: size_t,
        rgbStride: size_t,
        bgra: *mut u8,
        bgraStride: size_t,
        alpha: u8,
    );
}
extern "C" {
    pub fn SimdRgbToGray(
        rgb: *const u8,
        width: size_t,
        height: size_t,
        rgbStride: size_t,
        gray: *mut u8,
        grayStride: size_t,
    );
}
extern "C" {
    pub fn SimdRgbaToGray(
        rgba: *const u8,
        width: size_t,
        height: size_t,
        rgbaStride: size_t,
        gray: *mut u8,
        grayStride: size_t,
    );
}
extern "C" {
    pub fn SimdSegmentationChangeIndex(
        mask: *mut u8,
        stride: size_t,
        width: size_t,
        height: size_t,
        oldIndex: u8,
        newIndex: u8,
    );
}
extern "C" {
    pub fn SimdSegmentationFillSingleHoles(
        mask: *mut u8,
        stride: size_t,
        width: size_t,
        height: size_t,
        index: u8,
    );
}
extern "C" {
    pub fn SimdSegmentationPropagate2x2(
        parent: *const u8,
        parentStride: size_t,
        width: size_t,
        height: size_t,
        child: *mut u8,
        childStride: size_t,
        difference: *const u8,
        differenceStride: size_t,
        currentIndex: u8,
        invalidIndex: u8,
        emptyIndex: u8,
        differenceThreshold: u8,
    );
}
extern "C" {
    pub fn SimdSegmentationShrinkRegion(
        mask: *const u8,
        stride: size_t,
        width: size_t,
        height: size_t,
        index: u8,
        left: *mut isize,
        top: *mut isize,
        right: *mut isize,
        bottom: *mut isize,
    );
}
extern "C" {
    pub fn SimdShiftBilinear(
        src: *const u8,
        srcStride: size_t,
        width: size_t,
        height: size_t,
        channelCount: size_t,
        bkg: *const u8,
        bkgStride: size_t,
        shiftX: *const f64,
        shiftY: *const f64,
        cropLeft: size_t,
        cropTop: size_t,
        cropRight: size_t,
        cropBottom: size_t,
        dst: *mut u8,
        dstStride: size_t,
    );
}
extern "C" {
    pub fn SimdSobelDx(
        src: *const u8,
        srcStride: size_t,
        width: size_t,
        height: size_t,
        dst: *mut u8,
        dstStride: size_t,
    );
}
extern "C" {
    pub fn SimdSobelDxAbs(
        src: *const u8,
        srcStride: size_t,
        width: size_t,
        height: size_t,
        dst: *mut u8,
        dstStride: size_t,
    );
}
extern "C" {
    pub fn SimdSobelDxAbsSum(
        src: *const u8,
        stride: size_t,
        width: size_t,
        height: size_t,
        sum: *mut u64,
    );
}
extern "C" {
    pub fn SimdSobelDy(
        src: *const u8,
        srcStride: size_t,
        width: size_t,
        height: size_t,
        dst: *mut u8,
        dstStride: size_t,
    );
}
extern "C" {
    pub fn SimdSobelDyAbs(
        src: *const u8,
        srcStride: size_t,
        width: size_t,
        height: size_t,
        dst: *mut u8,
        dstStride: size_t,
    );
}
extern "C" {
    pub fn SimdSobelDyAbsSum(
        src: *const u8,
        stride: size_t,
        width: size_t,
        height: size_t,
        sum: *mut u64,
    );
}
extern "C" {
    pub fn SimdContourMetrics(
        src: *const u8,
        srcStride: size_t,
        width: size_t,
        height: size_t,
        dst: *mut u8,
        dstStride: size_t,
    );
}
extern "C" {
    pub fn SimdContourMetricsMasked(
        src: *const u8,
        srcStride: size_t,
        width: size_t,
        height: size_t,
        mask: *const u8,
        maskStride: size_t,
        indexMin: u8,
        dst: *mut u8,
        dstStride: size_t,
    );
}
extern "C" {
    pub fn SimdContourAnchors(
        src: *const u8,
        srcStride: size_t,
        width: size_t,
        height: size_t,
        step: size_t,
        threshold: i16,
        dst: *mut u8,
        dstStride: size_t,
    );
}
extern "C" {
    pub fn SimdSquaredDifferenceSum(
        a: *const u8,
        aStride: size_t,
        b: *const u8,
        bStride: size_t,
        width: size_t,
        height: size_t,
        sum: *mut u64,
    );
}
extern "C" {
    pub fn SimdSquaredDifferenceSumMasked(
        a: *const u8,
        aStride: size_t,
        b: *const u8,
        bStride: size_t,
        mask: *const u8,
        maskStride: size_t,
        index: u8,
        width: size_t,
        height: size_t,
        sum: *mut u64,
    );
}
extern "C" {
    pub fn SimdSquaredDifferenceSum32f(a: *const f32, b: *const f32, size: size_t, sum: *mut f32);
}
extern "C" {
    pub fn SimdSquaredDifferenceKahanSum32f(
        a: *const f32,
        b: *const f32,
        size: size_t,
        sum: *mut f32,
    );
}
extern "C" {
    pub fn SimdGetStatistic(
        src: *const u8,
        stride: size_t,
        width: size_t,
        height: size_t,
        min: *mut u8,
        max: *mut u8,
        average: *mut u8,
    );
}
extern "C" {
    pub fn SimdGetMoments(
        mask: *const u8,
        stride: size_t,
        width: size_t,
        height: size_t,
        index: u8,
        area: *mut u64,
        x: *mut u64,
        y: *mut u64,
        xx: *mut u64,
        xy: *mut u64,
        yy: *mut u64,
    );
}
extern "C" {
    pub fn SimdGetObjectMoments(
        src: *const u8,
        srcStride: size_t,
        width: size_t,
        height: size_t,
        mask: *const u8,
        maskStride: size_t,
        index: u8,
        n: *mut u64,
        s: *mut u64,
        sx: *mut u64,
        sy: *mut u64,
        sxx: *mut u64,
        sxy: *mut u64,
        syy: *mut u64,
    );
}
extern "C" {
    pub fn SimdGetRowSums(
        src: *const u8,
        stride: size_t,
        width: size_t,
        height: size_t,
        sums: *mut u32,
    );
}
extern "C" {
    pub fn SimdGetColSums(
        src: *const u8,
        stride: size_t,
        width: size_t,
        height: size_t,
        sums: *mut u32,
    );
}
extern "C" {
    pub fn SimdGetAbsDyRowSums(
        src: *const u8,
        stride: size_t,
        width: size_t,
        height: size_t,
        sums: *mut u32,
    );
}
extern "C" {
    pub fn SimdGetAbsDxColSums(
        src: *const u8,
        stride: size_t,
        width: size_t,
        height: size_t,
        sums: *mut u32,
    );
}
extern "C" {
    pub fn SimdValueSum(
        src: *const u8,
        stride: size_t,
        width: size_t,
        height: size_t,
        sum: *mut u64,
    );
}
extern "C" {
    pub fn SimdSquareSum(
        src: *const u8,
        stride: size_t,
        width: size_t,
        height: size_t,
        sum: *mut u64,
    );
}
extern "C" {
    pub fn SimdValueSquareSum(
        src: *const u8,
        stride: size_t,
        width: size_t,
        height: size_t,
        valueSum: *mut u64,
        squareSum: *mut u64,
    );
}
extern "C" {
    pub fn SimdValueSquareSums(
        src: *const u8,
        stride: size_t,
        width: size_t,
        height: size_t,
        channels: size_t,
        valueSums: *mut u64,
        squareSums: *mut u64,
    );
}
extern "C" {
    pub fn SimdCorrelationSum(
        a: *const u8,
        aStride: size_t,
        b: *const u8,
        bStride: size_t,
        width: size_t,
        height: size_t,
        sum: *mut u64,
    );
}
extern "C" {
    pub fn SimdStretchGray2x2(
        src: *const u8,
        srcWidth: size_t,
        srcHeight: size_t,
        srcStride: size_t,
        dst: *mut u8,
        dstWidth: size_t,
        dstHeight: size_t,
        dstStride: size_t,
    );
}
extern "C" {
    pub fn SimdSvmSumLinear(
        x: *const f32,
        svs: *const f32,
        weights: *const f32,
        length: size_t,
        count: size_t,
        sum: *mut f32,
    );
}
extern "C" {
    pub fn SimdSynetAddBias(
        bias: *const f32,
        channels: size_t,
        spatial: size_t,
        dst: *mut f32,
        format: SimdTensorFormatType,
    );
}
extern "C" {
    pub fn SimdSynetAdd8i(
        aData: *const u8,
        aScale: *const f32,
        aShift: *const f32,
        bData: *const u8,
        bScale: *const f32,
        bShift: *const f32,
        cData: *mut u8,
        cScale: *const f32,
        cShift: *const f32,
        batch: size_t,
        channels: size_t,
        spatial: size_t,
        format: SimdTensorFormatType,
        compatibility: SimdSynetCompatibilityType,
    );
}
extern "C" {
    pub fn SimdSynetConvert32fTo8u(
        src: *const f32,
        batch: size_t,
        channels: size_t,
        height: size_t,
        width: size_t,
        format: SimdTensorFormatType,
        scale: *const f32,
        shift: *const f32,
        dst: *mut u8,
        compatibility: SimdSynetCompatibilityType,
    );
}
extern "C" {
    pub fn SimdSynetConvert8uTo32f(
        src: *const u8,
        batch: size_t,
        channels: size_t,
        height: size_t,
        width: size_t,
        format: SimdTensorFormatType,
        scale: *const f32,
        shift: *const f32,
        dst: *mut f32,
        compatibility: SimdSynetCompatibilityType,
    );
}
extern "C" {
    pub fn SimdSynetConvolution32fInit(
        batch: size_t,
        conv: *const SimdConvolutionParameters,
        compatibility: SimdSynetCompatibilityType,
    ) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn SimdSynetConvolution32fExternalBufferSize(
        context: *const ::std::os::raw::c_void,
    ) -> size_t;
}
extern "C" {
    pub fn SimdSynetConvolution32fInternalBufferSize(
        context: *const ::std::os::raw::c_void,
    ) -> size_t;
}
extern "C" {
    pub fn SimdSynetConvolution32fInfo(
        context: *const ::std::os::raw::c_void,
    ) -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn SimdSynetConvolution32fSetParams(
        context: *mut ::std::os::raw::c_void,
        weight: *const f32,
        internal: *mut SimdBool,
        bias: *const f32,
        params: *const f32,
    );
}
extern "C" {
    pub fn SimdSynetConvolution32fForward(
        context: *mut ::std::os::raw::c_void,
        src: *const f32,
        buf: *mut f32,
        dst: *mut f32,
    );
}
extern "C" {
    pub fn SimdSynetConvolution8iInit(
        batch: size_t,
        conv: *const SimdConvolutionParameters,
        compatibility: SimdSynetCompatibilityType,
    ) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn SimdSynetConvolution8iExternalBufferSize(
        context: *const ::std::os::raw::c_void,
    ) -> size_t;
}
extern "C" {
    pub fn SimdSynetConvolution8iInternalBufferSize(
        context: *const ::std::os::raw::c_void,
    ) -> size_t;
}
extern "C" {
    pub fn SimdSynetConvolution8iInfo(
        context: *const ::std::os::raw::c_void,
    ) -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn SimdSynetConvolution8iSetParams(
        context: *mut ::std::os::raw::c_void,
        weight: *const f32,
        bias: *const f32,
        params: *const f32,
        stats: *const *const f32,
    );
}
extern "C" {
    pub fn SimdSynetConvolution8iForward(
        context: *mut ::std::os::raw::c_void,
        src: *const u8,
        buf: *mut u8,
        dst: *mut u8,
    );
}
extern "C" {
    pub fn SimdSynetDeconvolution32fInit(
        batch: size_t,
        conv: *const SimdConvolutionParameters,
        compatibility: SimdSynetCompatibilityType,
    ) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn SimdSynetDeconvolution32fExternalBufferSize(
        context: *const ::std::os::raw::c_void,
    ) -> size_t;
}
extern "C" {
    pub fn SimdSynetDeconvolution32fInternalBufferSize(
        context: *const ::std::os::raw::c_void,
    ) -> size_t;
}
extern "C" {
    pub fn SimdSynetDeconvolution32fInfo(
        context: *const ::std::os::raw::c_void,
    ) -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn SimdSynetDeconvolution32fSetParams(
        context: *mut ::std::os::raw::c_void,
        weight: *const f32,
        internal: *mut SimdBool,
        bias: *const f32,
        params: *const f32,
    );
}
extern "C" {
    pub fn SimdSynetDeconvolution32fForward(
        context: *mut ::std::os::raw::c_void,
        src: *const f32,
        buf: *mut f32,
        dst: *mut f32,
    );
}
extern "C" {
    pub fn SimdSynetEltwiseLayerForward(
        src: *const *const f32,
        weight: *const f32,
        count: size_t,
        size: size_t,
        type_: SimdSynetEltwiseOperationType,
        dst: *mut f32,
    );
}
extern "C" {
    pub fn SimdSynetElu32f(src: *const f32, size: size_t, alpha: *const f32, dst: *mut f32);
}
extern "C" {
    pub fn SimdSynetFusedLayerForward0(
        src: *const f32,
        bias: *const f32,
        scale: *const f32,
        channels: size_t,
        spatial: size_t,
        dst: *mut f32,
        format: SimdTensorFormatType,
    );
}
extern "C" {
    pub fn SimdSynetFusedLayerForward1(
        src: *const f32,
        bias0: *const f32,
        scale1: *const f32,
        bias1: *const f32,
        channels: size_t,
        spatial: size_t,
        dst: *mut f32,
        format: SimdTensorFormatType,
    );
}
extern "C" {
    pub fn SimdSynetFusedLayerForward2(
        src: *const f32,
        scale: *const f32,
        bias: *const f32,
        channels: size_t,
        spatial: size_t,
        slope: *const f32,
        dst: *mut f32,
        format: SimdTensorFormatType,
    );
}
extern "C" {
    pub fn SimdSynetFusedLayerForward3(
        src: *const f32,
        scale: *const f32,
        bias: *const f32,
        channels: size_t,
        spatial: size_t,
        dst: *mut f32,
        format: SimdTensorFormatType,
    );
}
extern "C" {
    pub fn SimdSynetFusedLayerForward4(
        src: *const f32,
        bias0: *const f32,
        scale1: *const f32,
        bias1: *const f32,
        channels: size_t,
        spatial: size_t,
        dst: *mut f32,
        format: SimdTensorFormatType,
    );
}
extern "C" {
    pub fn SimdSynetFusedLayerForward8(
        src0: *const f32,
        src1: *const f32,
        src2: *const f32,
        channels: size_t,
        spatial: size_t,
        dst: *mut f32,
        format: SimdTensorFormatType,
    );
}
extern "C" {
    pub fn SimdSynetFusedLayerForward9(
        src0: *const f32,
        src1: *const f32,
        scale: *const f32,
        bias: *const f32,
        channels0: size_t,
        channels1: size_t,
        spatial: size_t,
        dst0: *mut f32,
        dst1: *mut f32,
        format: SimdTensorFormatType,
    );
}
extern "C" {
    pub fn SimdSynetHardSigmoid32f(
        src: *const f32,
        size: size_t,
        scale: *const f32,
        shift: *const f32,
        dst: *mut f32,
    );
}
extern "C" {
    pub fn SimdSynetHswish32f(
        src: *const f32,
        size: size_t,
        shift: *const f32,
        scale: *const f32,
        dst: *mut f32,
    );
}
extern "C" {
    pub fn SimdSynetInnerProduct32fInit(
        batch: size_t,
        input: size_t,
        output: size_t,
        transpose: SimdBool,
        activation: SimdConvolutionActivationType,
    ) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn SimdSynetInnerProduct32fInternalBufferSize(
        context: *const ::std::os::raw::c_void,
    ) -> size_t;
}
extern "C" {
    pub fn SimdSynetInnerProduct32fSetParams(
        context: *mut ::std::os::raw::c_void,
        weight: *const f32,
        internal: *mut SimdBool,
        bias: *const f32,
        params: *const f32,
    );
}
extern "C" {
    pub fn SimdSynetInnerProduct32fForward(
        context: *mut ::std::os::raw::c_void,
        src: *const f32,
        dst: *mut f32,
    );
}
extern "C" {
    pub fn SimdSynetInnerProductLayerForward(
        src: *const f32,
        weight: *const f32,
        bias: *const f32,
        count: size_t,
        size: size_t,
        dst: *mut f32,
    );
}
extern "C" {
    pub fn SimdSynetInnerProduct8i(
        M: size_t,
        N: size_t,
        K: size_t,
        src: *const u8,
        weight: *const i8,
        dst: *mut i32,
        compatibility: SimdSynetCompatibilityType,
    );
}
extern "C" {
    pub fn SimdSynetLrnLayerCrossChannels(
        src: *const f32,
        half: size_t,
        channels: size_t,
        spatial: size_t,
        k: *const f32,
        dst: *mut f32,
        format: SimdTensorFormatType,
    );
}
extern "C" {
    pub fn SimdSynetMergedConvolution32fInit(
        batch: size_t,
        convs: *const SimdConvolutionParameters,
        count: size_t,
        add: SimdBool,
        compatibility: SimdSynetCompatibilityType,
    ) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn SimdSynetMergedConvolution32fExternalBufferSize(
        context: *const ::std::os::raw::c_void,
    ) -> size_t;
}
extern "C" {
    pub fn SimdSynetMergedConvolution32fInternalBufferSize(
        context: *const ::std::os::raw::c_void,
    ) -> size_t;
}
extern "C" {
    pub fn SimdSynetMergedConvolution32fInfo(
        context: *const ::std::os::raw::c_void,
    ) -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn SimdSynetMergedConvolution32fSetParams(
        context: *mut ::std::os::raw::c_void,
        weight: *const *const f32,
        internal: *mut SimdBool,
        bias: *const *const f32,
        params: *const *const f32,
    );
}
extern "C" {
    pub fn SimdSynetMergedConvolution32fForward(
        context: *mut ::std::os::raw::c_void,
        src: *const f32,
        buf: *mut f32,
        dst: *mut f32,
    );
}
extern "C" {
    pub fn SimdSynetMergedConvolution8iInit(
        batch: size_t,
        convs: *const SimdConvolutionParameters,
        count: size_t,
        compatibility: SimdSynetCompatibilityType,
    ) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn SimdSynetMergedConvolution8iExternalBufferSize(
        context: *const ::std::os::raw::c_void,
    ) -> size_t;
}
extern "C" {
    pub fn SimdSynetMergedConvolution8iInternalBufferSize(
        context: *const ::std::os::raw::c_void,
    ) -> size_t;
}
extern "C" {
    pub fn SimdSynetMergedConvolution8iInfo(
        context: *const ::std::os::raw::c_void,
    ) -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn SimdSynetMergedConvolution8iSetParams(
        context: *mut ::std::os::raw::c_void,
        weight: *const *const f32,
        internal: *mut SimdBool,
        bias: *const *const f32,
        params: *const *const f32,
        stats: *const *const f32,
    );
}
extern "C" {
    pub fn SimdSynetMergedConvolution8iForward(
        context: *mut ::std::os::raw::c_void,
        src: *const u8,
        buf: *mut u8,
        dst: *mut u8,
    );
}
extern "C" {
    pub fn SimdSynetMish32f(src: *const f32, size: size_t, threshold: *const f32, dst: *mut f32);
}
extern "C" {
    pub fn SimdSynetPoolingForwardAverage(
        src: *const f32,
        srcC: size_t,
        srcH: size_t,
        srcW: size_t,
        kernelY: size_t,
        kernelX: size_t,
        strideY: size_t,
        strideX: size_t,
        padY: size_t,
        padX: size_t,
        dst: *mut f32,
        dstH: size_t,
        dstW: size_t,
        excludePad: SimdBool,
        format: SimdTensorFormatType,
    );
}
extern "C" {
    pub fn SimdSynetPoolingForwardMax32f(
        src: *const f32,
        srcC: size_t,
        srcH: size_t,
        srcW: size_t,
        kernelY: size_t,
        kernelX: size_t,
        strideY: size_t,
        strideX: size_t,
        padY: size_t,
        padX: size_t,
        dst: *mut f32,
        dstH: size_t,
        dstW: size_t,
        format: SimdTensorFormatType,
    );
}
extern "C" {
    pub fn SimdSynetPoolingForwardMax8u(
        src: *const u8,
        srcC: size_t,
        srcH: size_t,
        srcW: size_t,
        kernelY: size_t,
        kernelX: size_t,
        strideY: size_t,
        strideX: size_t,
        padY: size_t,
        padX: size_t,
        dst: *mut u8,
        dstH: size_t,
        dstW: size_t,
        format: SimdTensorFormatType,
    );
}
extern "C" {
    pub fn SimdSynetPreluLayerForward(
        src: *const f32,
        slope: *const f32,
        channels: size_t,
        spatial: size_t,
        dst: *mut f32,
        format: SimdTensorFormatType,
    );
}
extern "C" {
    pub fn SimdSynetRelu32f(src: *const f32, size: size_t, slope: *const f32, dst: *mut f32);
}
extern "C" {
    pub fn SimdSynetReorderImage(
        batch: size_t,
        channels: size_t,
        spatial: size_t,
        src: *const f32,
        srcFormat: SimdTensorFormatType,
        dst: *mut f32,
        dstFormat: SimdTensorFormatType,
    );
}
extern "C" {
    pub fn SimdSynetReorderFilter(
        output: size_t,
        input: size_t,
        kernel: size_t,
        src: *const f32,
        srcFormat: SimdTensorFormatType,
        dst: *mut f32,
        dstFormat: SimdTensorFormatType,
    );
}
extern "C" {
    pub fn SimdSynetRestrictRange32f(
        src: *const f32,
        size: size_t,
        lower: *const f32,
        upper: *const f32,
        dst: *mut f32,
    );
}
extern "C" {
    pub fn SimdSynetScaleLayerForward(
        src: *const f32,
        scale: *const f32,
        bias: *const f32,
        channels: size_t,
        height: size_t,
        width: size_t,
        dst: *mut f32,
        format: SimdTensorFormatType,
        compatibility: SimdSynetCompatibilityType,
    );
}
extern "C" {
    pub fn SimdSynetScale8iInit(
        batch: size_t,
        channels: size_t,
        spatial: size_t,
        srcType: SimdTensorDataType,
        dstType: SimdTensorDataType,
        format: SimdTensorFormatType,
        compatibility: SimdSynetCompatibilityType,
    ) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn SimdSynetScale8iInternalBufferSize(context: *const ::std::os::raw::c_void) -> size_t;
}
extern "C" {
    pub fn SimdSynetScale8iSetParams(
        context: *mut ::std::os::raw::c_void,
        scale: *const f32,
        bias: *const f32,
        stats: *const *const f32,
    );
}
extern "C" {
    pub fn SimdSynetScale8iForward(
        context: *mut ::std::os::raw::c_void,
        src: *const u8,
        dst: *mut u8,
    );
}
extern "C" {
    pub fn SimdSynetSetInput(
        src: *const u8,
        width: size_t,
        height: size_t,
        stride: size_t,
        srcFormat: SimdPixelFormatType,
        lower: *const f32,
        upper: *const f32,
        dst: *mut f32,
        channels: size_t,
        dstFormat: SimdTensorFormatType,
    );
}
extern "C" {
    pub fn SimdSynetShuffleLayerForward(
        src0: *const f32,
        src1: *const f32,
        channels0: size_t,
        channels1: size_t,
        spatial: size_t,
        dst0: *mut f32,
        dst1: *mut f32,
        format: SimdTensorFormatType,
        type_: ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn SimdSynetSigmoid32f(src: *const f32, size: size_t, slope: *const f32, dst: *mut f32);
}
extern "C" {
    pub fn SimdSynetSoftmaxLayerForward(
        src: *const f32,
        outer: size_t,
        count: size_t,
        inner: size_t,
        dst: *mut f32,
    );
}
extern "C" {
    pub fn SimdSynetSoftplus32f(
        src: *const f32,
        size: size_t,
        beta: *const f32,
        threshold: *const f32,
        dst: *mut f32,
    );
}
extern "C" {
    pub fn SimdSynetSpecifyTensorFormat(format: SimdTensorFormatType) -> SimdTensorFormatType;
}
extern "C" {
    pub fn SimdSynetSwish32f(src: *const f32, size: size_t, slope: *const f32, dst: *mut f32);
}
extern "C" {
    pub fn SimdSynetTanh32f(src: *const f32, size: size_t, slope: *const f32, dst: *mut f32);
}
extern "C" {
    pub fn SimdSynetTensorAlignment(format: SimdTensorFormatType) -> size_t;
}
extern "C" {
    pub fn SimdSynetUnaryOperation32fLayerForward(
        src: *const f32,
        size: size_t,
        type_: SimdSynetUnaryOperation32fType,
        dst: *mut f32,
    );
}
extern "C" {
    pub fn SimdTextureBoostedSaturatedGradient(
        src: *const u8,
        srcStride: size_t,
        width: size_t,
        height: size_t,
        saturation: u8,
        boost: u8,
        dx: *mut u8,
        dxStride: size_t,
        dy: *mut u8,
        dyStride: size_t,
    );
}
extern "C" {
    pub fn SimdTextureBoostedUv(
        src: *const u8,
        srcStride: size_t,
        width: size_t,
        height: size_t,
        boost: u8,
        dst: *mut u8,
        dstStride: size_t,
    );
}
extern "C" {
    pub fn SimdTextureGetDifferenceSum(
        src: *const u8,
        srcStride: size_t,
        width: size_t,
        height: size_t,
        lo: *const u8,
        loStride: size_t,
        hi: *const u8,
        hiStride: size_t,
        sum: *mut i64,
    );
}
extern "C" {
    pub fn SimdTexturePerformCompensation(
        src: *const u8,
        srcStride: size_t,
        width: size_t,
        height: size_t,
        shift: i32,
        dst: *mut u8,
        dstStride: size_t,
    );
}
extern "C" {
    pub fn SimdTransformImage(
        src: *const u8,
        srcStride: size_t,
        width: size_t,
        height: size_t,
        pixelSize: size_t,
        transform: SimdTransformType,
        dst: *mut u8,
        dstStride: size_t,
    );
}
extern "C" {
    pub fn SimdUyvy422ToBgr(
        uyvy: *const u8,
        uyvyStride: size_t,
        width: size_t,
        height: size_t,
        bgr: *mut u8,
        bgrStride: size_t,
        yuvType: SimdYuvType,
    );
}
extern "C" {
    pub fn SimdUyvy422ToYuv420p(
        uyvy: *const u8,
        uyvyStride: size_t,
        width: size_t,
        height: size_t,
        y: *mut u8,
        yStride: size_t,
        u: *mut u8,
        uStride: size_t,
        v: *mut u8,
        vStride: size_t,
    );
}
extern "C" {
    pub fn SimdWinogradKernel1x3Block1x4SetFilter(
        src: *const f32,
        size: size_t,
        dst: *mut f32,
        trans: SimdBool,
    );
}
extern "C" {
    pub fn SimdWinogradKernel1x3Block1x4SetInput(
        src: *const f32,
        srcChannels: size_t,
        srcHeight: size_t,
        srcWidth: size_t,
        padY: size_t,
        padX: size_t,
        padH: size_t,
        padW: size_t,
        dst: *mut f32,
        dstStride: size_t,
        trans: SimdBool,
    );
}
extern "C" {
    pub fn SimdWinogradKernel1x3Block1x4SetOutput(
        src: *const f32,
        srcStride: size_t,
        dst: *mut f32,
        dstChannels: size_t,
        dstHeight: size_t,
        dstWidth: size_t,
        trans: SimdBool,
    );
}
extern "C" {
    pub fn SimdWinogradKernel1x5Block1x4SetFilter(
        src: *const f32,
        size: size_t,
        dst: *mut f32,
        trans: SimdBool,
    );
}
extern "C" {
    pub fn SimdWinogradKernel1x5Block1x4SetInput(
        src: *const f32,
        srcChannels: size_t,
        srcHeight: size_t,
        srcWidth: size_t,
        padY: size_t,
        padX: size_t,
        padH: size_t,
        padW: size_t,
        dst: *mut f32,
        dstStride: size_t,
        trans: SimdBool,
    );
}
extern "C" {
    pub fn SimdWinogradKernel1x5Block1x4SetOutput(
        src: *const f32,
        srcStride: size_t,
        dst: *mut f32,
        dstChannels: size_t,
        dstHeight: size_t,
        dstWidth: size_t,
        trans: SimdBool,
    );
}
extern "C" {
    pub fn SimdWinogradKernel2x2Block2x2SetFilter(
        src: *const f32,
        size: size_t,
        dst: *mut f32,
        trans: SimdBool,
    );
}
extern "C" {
    pub fn SimdWinogradKernel2x2Block2x2SetInput(
        src: *const f32,
        srcChannels: size_t,
        srcHeight: size_t,
        srcWidth: size_t,
        padY: size_t,
        padX: size_t,
        padH: size_t,
        padW: size_t,
        dst: *mut f32,
        dstStride: size_t,
        trans: SimdBool,
    );
}
extern "C" {
    pub fn SimdWinogradKernel2x2Block2x2SetOutput(
        src: *const f32,
        srcStride: size_t,
        dst: *mut f32,
        dstChannels: size_t,
        dstHeight: size_t,
        dstWidth: size_t,
        trans: SimdBool,
    );
}
extern "C" {
    pub fn SimdWinogradKernel2x2Block4x4SetFilter(
        src: *const f32,
        size: size_t,
        dst: *mut f32,
        trans: SimdBool,
    );
}
extern "C" {
    pub fn SimdWinogradKernel2x2Block4x4SetInput(
        src: *const f32,
        srcChannels: size_t,
        srcHeight: size_t,
        srcWidth: size_t,
        padY: size_t,
        padX: size_t,
        padH: size_t,
        padW: size_t,
        dst: *mut f32,
        dstStride: size_t,
        trans: SimdBool,
    );
}
extern "C" {
    pub fn SimdWinogradKernel2x2Block4x4SetOutput(
        src: *const f32,
        srcStride: size_t,
        dst: *mut f32,
        dstChannels: size_t,
        dstHeight: size_t,
        dstWidth: size_t,
        trans: SimdBool,
    );
}
extern "C" {
    pub fn SimdWinogradKernel3x3Block2x2SetFilter(
        src: *const f32,
        size: size_t,
        dst: *mut f32,
        trans: SimdBool,
    );
}
extern "C" {
    pub fn SimdWinogradKernel3x3Block2x2SetInput(
        src: *const f32,
        srcChannels: size_t,
        srcHeight: size_t,
        srcWidth: size_t,
        padY: size_t,
        padX: size_t,
        padH: size_t,
        padW: size_t,
        dst: *mut f32,
        dstStride: size_t,
        trans: SimdBool,
    );
}
extern "C" {
    pub fn SimdWinogradKernel3x3Block2x2SetOutput(
        src: *const f32,
        srcStride: size_t,
        dst: *mut f32,
        dstChannels: size_t,
        dstHeight: size_t,
        dstWidth: size_t,
        trans: SimdBool,
    );
}
extern "C" {
    pub fn SimdWinogradKernel3x3Block3x3SetFilter(
        src: *const f32,
        size: size_t,
        dst: *mut f32,
        trans: SimdBool,
    );
}
extern "C" {
    pub fn SimdWinogradKernel3x3Block3x3SetInput(
        src: *const f32,
        srcChannels: size_t,
        srcHeight: size_t,
        srcWidth: size_t,
        padY: size_t,
        padX: size_t,
        padH: size_t,
        padW: size_t,
        dst: *mut f32,
        dstStride: size_t,
        trans: SimdBool,
    );
}
extern "C" {
    pub fn SimdWinogradKernel3x3Block3x3SetOutput(
        src: *const f32,
        srcStride: size_t,
        dst: *mut f32,
        dstChannels: size_t,
        dstHeight: size_t,
        dstWidth: size_t,
        trans: SimdBool,
    );
}
extern "C" {
    pub fn SimdWinogradKernel3x3Block4x4SetFilter(
        src: *const f32,
        size: size_t,
        dst: *mut f32,
        trans: SimdBool,
    );
}
extern "C" {
    pub fn SimdWinogradKernel3x3Block4x4SetInput(
        src: *const f32,
        srcChannels: size_t,
        srcHeight: size_t,
        srcWidth: size_t,
        padY: size_t,
        padX: size_t,
        padH: size_t,
        padW: size_t,
        dst: *mut f32,
        dstStride: size_t,
        trans: SimdBool,
    );
}
extern "C" {
    pub fn SimdWinogradKernel3x3Block4x4SetOutput(
        src: *const f32,
        srcStride: size_t,
        dst: *mut f32,
        dstChannels: size_t,
        dstHeight: size_t,
        dstWidth: size_t,
        trans: SimdBool,
    );
}
extern "C" {
    pub fn SimdYuva420pToBgra(
        y: *const u8,
        yStride: size_t,
        u: *const u8,
        uStride: size_t,
        v: *const u8,
        vStride: size_t,
        a: *const u8,
        aStride: size_t,
        width: size_t,
        height: size_t,
        bgra: *mut u8,
        bgraStride: size_t,
    );
}
extern "C" {
    pub fn SimdYuv420pToBgr(
        y: *const u8,
        yStride: size_t,
        u: *const u8,
        uStride: size_t,
        v: *const u8,
        vStride: size_t,
        width: size_t,
        height: size_t,
        bgr: *mut u8,
        bgrStride: size_t,
    );
}
extern "C" {
    pub fn SimdYuv422pToBgr(
        y: *const u8,
        yStride: size_t,
        u: *const u8,
        uStride: size_t,
        v: *const u8,
        vStride: size_t,
        width: size_t,
        height: size_t,
        bgr: *mut u8,
        bgrStride: size_t,
    );
}
extern "C" {
    pub fn SimdYuv444pToBgr(
        y: *const u8,
        yStride: size_t,
        u: *const u8,
        uStride: size_t,
        v: *const u8,
        vStride: size_t,
        width: size_t,
        height: size_t,
        bgr: *mut u8,
        bgrStride: size_t,
    );
}
extern "C" {
    pub fn SimdYuv420pToBgra(
        y: *const u8,
        yStride: size_t,
        u: *const u8,
        uStride: size_t,
        v: *const u8,
        vStride: size_t,
        width: size_t,
        height: size_t,
        bgra: *mut u8,
        bgraStride: size_t,
        alpha: u8,
    );
}
extern "C" {
    pub fn SimdYuv420pToBgraV2(
        y: *const u8,
        yStride: size_t,
        u: *const u8,
        uStride: size_t,
        v: *const u8,
        vStride: size_t,
        width: size_t,
        height: size_t,
        bgra: *mut u8,
        bgraStride: size_t,
        alpha: u8,
        yuvType: SimdYuvType,
    );
}
extern "C" {
    pub fn SimdYuv422pToBgra(
        y: *const u8,
        yStride: size_t,
        u: *const u8,
        uStride: size_t,
        v: *const u8,
        vStride: size_t,
        width: size_t,
        height: size_t,
        bgra: *mut u8,
        bgraStride: size_t,
        alpha: u8,
    );
}
extern "C" {
    pub fn SimdYuv444pToBgra(
        y: *const u8,
        yStride: size_t,
        u: *const u8,
        uStride: size_t,
        v: *const u8,
        vStride: size_t,
        width: size_t,
        height: size_t,
        bgra: *mut u8,
        bgraStride: size_t,
        alpha: u8,
    );
}
extern "C" {
    pub fn SimdYuv444pToBgraV2(
        y: *const u8,
        yStride: size_t,
        u: *const u8,
        uStride: size_t,
        v: *const u8,
        vStride: size_t,
        width: size_t,
        height: size_t,
        bgra: *mut u8,
        bgraStride: size_t,
        alpha: u8,
        yuvType: SimdYuvType,
    );
}
extern "C" {
    pub fn SimdYuv444pToHsl(
        y: *const u8,
        yStride: size_t,
        u: *const u8,
        uStride: size_t,
        v: *const u8,
        vStride: size_t,
        width: size_t,
        height: size_t,
        hsl: *mut u8,
        hslStride: size_t,
    );
}
extern "C" {
    pub fn SimdYuv444pToHsv(
        y: *const u8,
        yStride: size_t,
        u: *const u8,
        uStride: size_t,
        v: *const u8,
        vStride: size_t,
        width: size_t,
        height: size_t,
        hsv: *mut u8,
        hsvStride: size_t,
    );
}
extern "C" {
    pub fn SimdYuv420pToHue(
        y: *const u8,
        yStride: size_t,
        u: *const u8,
        uStride: size_t,
        v: *const u8,
        vStride: size_t,
        width: size_t,
        height: size_t,
        hue: *mut u8,
        hueStride: size_t,
    );
}
extern "C" {
    pub fn SimdYuv444pToHue(
        y: *const u8,
        yStride: size_t,
        u: *const u8,
        uStride: size_t,
        v: *const u8,
        vStride: size_t,
        width: size_t,
        height: size_t,
        hue: *mut u8,
        hueStride: size_t,
    );
}
extern "C" {
    pub fn SimdYuv420pToRgb(
        y: *const u8,
        yStride: size_t,
        u: *const u8,
        uStride: size_t,
        v: *const u8,
        vStride: size_t,
        width: size_t,
        height: size_t,
        rgb: *mut u8,
        rgbStride: size_t,
    );
}
extern "C" {
    pub fn SimdYuv422pToRgb(
        y: *const u8,
        yStride: size_t,
        u: *const u8,
        uStride: size_t,
        v: *const u8,
        vStride: size_t,
        width: size_t,
        height: size_t,
        rgb: *mut u8,
        rgbStride: size_t,
    );
}
extern "C" {
    pub fn SimdYuv444pToRgb(
        y: *const u8,
        yStride: size_t,
        u: *const u8,
        uStride: size_t,
        v: *const u8,
        vStride: size_t,
        width: size_t,
        height: size_t,
        rgb: *mut u8,
        rgbStride: size_t,
    );
}
extern "C" {
    pub fn SimdYuv420pToUyvy422(
        y: *const u8,
        yStride: size_t,
        u: *const u8,
        uStride: size_t,
        v: *const u8,
        vStride: size_t,
        width: size_t,
        height: size_t,
        uyvy: *mut u8,
        uyvyStride: size_t,
    );
}
